{"version":3,"sources":["Scaffold.ts","DaVinci.ts","DaVinciSpec.tsx","Download.ts","Parts.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Chirality","adjacent","v0","v1","push","Scaffold","frequency","radius","chirality","vertices","VERTEX","forEach","location","vertexAt","EDGE","edge","midVertices","map","midEdge","vertexBetween","FACE_EDGES","faceEdge","side0","side1","side2","this","buildFaces","buildEdgeVertices","vertex","outward","Vector3","copy","normalize","first","pop","Error","sorted","vectorTo","subVectors","top","length","next","find","v","toAdjacent","toTop","dot","dotProduct","crossVectors","Left","Right","filter","adj","index","sortVertex","edgeVertices","edgeVertexIndex","previousVertex","verticesOfEdge","walk","loc0","loc1","spot","lerpVectors","faceVertexArrays","FACE_VERTICES","faceVertexIndex","faceIndex","faceVertex","which","origin","walkA","vectorA","sub","walkB","v2","vectorB","add","row","rowMember","vert","sideVertices","antiWalk","walkSide","faceEdges","vsVertex","PENTAGON_VERTICES","vertexArray","current","edgeVertexA","front","edgeVertexB","lerp","multiplyScalar","ONE","PHI","barName","vertexA","vertexB","min","Math","max","daVinci","scaffold","angle","twist","joints","freshJoint","point","node","bars","dictionary","adjacentVertex","jointA","jointB","jointC","bar","jointD","hubs","adjacentBars","intersect","planeBar","lineBar","extendBar","normal","plane","Plane","findIndex","extend","start","end","nextLine","Line3","intersectionPoint","intersectLine","distanceTo","axis","applyAxisAngle","bolts","hub","currentBar","nextIndex","nextBar","bolt","degreesToRadians","degree","PI","SpecDisplay","spec","className","degrees","barWidth","barHeight","barExtension","boltExtension","SpecEditor","setSpec","useState","toString","setFrequency","setDegrees","setRadius","boltWidth","setBoltWidth","setBarWidth","setBarHeight","setBarExtension","setBoltExtension","isFrequencyValid","value","f","parseInt","isNaN","onSubmit","event","preventDefault","daVinciSpec","parseFloat","handleSubmit","target","href","for","id","valid","invalid","onChange","type","csvNumber","n","toFixed","replace","saveCSVZip","output","zip","JSZip","file","rows","joint","x","y","z","join","extractNodeFile","daVinciIntervals","interval","indexString","nodeIndexes","i","extractIntervalFile","generateAsync","mimeType","then","blob","FileSaver","saveAs","Date","toISOString","UP","DOWN","BarBox","renderSpec","unit","midpoint","tangent","basis","Matrix4","makeBasis","setPosition","scale","matrix","matrixAutoUpdate","attach","color","BoltCylinder","position","rotation","Euler","setFromQuaternion","Quaternion","setFromUnitVectors","args","INITIAL_RENDER_SPEC","chiralityFromSpec","App","setRenderSpec","setScaffold","daVinciResult","setDaVinciResult","version","setVersion","useEffect","radians","abs","freshScaffold","onClick","undefined","daVinciOutput","intensity","onDoubleClick","face","camera","transparent","opacity","PerspectiveCamera","makeDefault","OrbitControls","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b0b5495.chunk.js","sourcesContent":["/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport {Vector3} from \"three\"\n\nexport interface Vertex {\n    index: number,\n    location: Vector3\n    adjacent: Vertex[]\n}\n\nfunction adjacent(v0: Vertex, v1: Vertex): void {\n    v0.adjacent.push(v1)\n    v1.adjacent.push(v0)\n}\n\nexport enum Chirality {\n    Left, Right,\n}\n\nexport class Scaffold {\n    public readonly vertices: Vertex[] = []\n\n    constructor(public readonly frequency: number, public readonly radius: number, public readonly chirality: Chirality) {\n        VERTEX.forEach(location => this.vertexAt(location))\n        if (frequency === 1) {\n            EDGE.forEach(edge => {\n                const v0 = this.vertices[edge[0]]\n                const v1 = this.vertices[edge[1]]\n                adjacent(v0, v1)\n            })\n        } else if (frequency === 2) {\n            const midVertices = EDGE.map(edge => {\n                const v0 = this.vertices[edge[0]]\n                const v1 = this.vertices[edge[1]]\n                const midEdge = this.vertexBetween(v0, v1)\n                adjacent(v0, midEdge)\n                adjacent(midEdge, v1)\n                return midEdge\n            })\n            FACE_EDGES.forEach(faceEdge => {\n                const side0 = midVertices[faceEdge[0]]\n                const side1 = midVertices[faceEdge[1]]\n                const side2 = midVertices[faceEdge[2]]\n                adjacent(side0, side1)\n                adjacent(side1, side2)\n                adjacent(side2, side0)\n            })\n        } else {\n            this.buildFaces(this.buildEdgeVertices())\n        }\n        this.vertices.forEach(vertex => sortVertex(vertex, chirality))\n    }\n\n    private buildEdgeVertices(): Vertex[][] {\n        const edgeVertices: Vertex[][] = []\n        EDGE.forEach(edgeVertexIndex => {\n            const verticesOfEdge: Vertex[] = []\n            edgeVertices.push(verticesOfEdge)\n            let vertex: Vertex | undefined\n            let previousVertex: Vertex | undefined\n            for (let walk = 0; walk < this.frequency - 1; walk++) {\n                previousVertex = vertex\n                const v0 = this.vertices[edgeVertexIndex[0]]\n                const v1 = this.vertices[edgeVertexIndex[1]]\n                const loc0 = v0.location\n                const loc1 = v1.location\n                const spot = new Vector3().lerpVectors(loc0, loc1, (walk + 1) / this.frequency)\n                vertex = this.vertexAt(spot)\n                verticesOfEdge.push(vertex)\n                if (previousVertex) {\n                    adjacent(vertex, previousVertex)\n                    if (walk === this.frequency - 2) {\n                        adjacent(vertex, v1)\n                    }\n                } else {\n                    adjacent(vertex, v0)\n                }\n            }\n        })\n        return edgeVertices\n    }\n\n    private buildFaces(edgeVertices: Vertex[][]): void {\n        const faceVertexArrays: Vertex[][] = []\n        FACE_VERTICES.forEach((faceVertexIndex, faceIndex) => {\n            const faceVertex = (which: number) => this.vertices[faceVertexIndex[which]]\n            const v0 = faceVertex(0)\n            const origin = v0.location\n            // interpolate along the edges of the face creating arrays of vertices on the way\n            for (let walkA = 1; walkA < this.frequency - 1; walkA++) {\n                const v1 = faceVertex(1)\n                const vectorA = new Vector3().lerpVectors(origin, v1.location, walkA / this.frequency)\n                vectorA.sub(origin)\n                faceVertexArrays[walkA - 1] = []\n                for (let walkB = 1; walkB < this.frequency - walkA; walkB++) {\n                    const v2 = faceVertex(2)\n                    const vectorB = new Vector3().lerpVectors(origin, v2.location, walkB / this.frequency)\n                    vectorB.sub(origin)\n                    const spot = new Vector3().copy(origin)\n                    spot.add(vectorA)\n                    spot.add(vectorB)\n                    faceVertexArrays[walkA - 1].push(this.vertexAt(spot))\n                }\n            }\n            // define the adjacency among face vertices\n            for (let row = 0; row < faceVertexArrays.length; row++) {\n                for (let rowMember = 0; rowMember < faceVertexArrays[row].length; rowMember++) {\n                    if (rowMember < faceVertexArrays[row].length - 1) {\n                        adjacent(faceVertexArrays[row][rowMember], faceVertexArrays[row][rowMember + 1])\n                    }\n                    if (row > 0) {\n                        const vert = faceVertexArrays[row][rowMember]\n                        adjacent(vert, faceVertexArrays[row - 1][rowMember])\n                        adjacent(vert, faceVertexArrays[row - 1][rowMember + 1])\n                    }\n                }\n            }\n            // compile side vertices (of a triangle!) reversing traversal when necessary\n            const sideVertices: Vertex[] [] = [[], [], []]\n            for (let walk = 0; walk < this.frequency - 2; walk++) {\n                const antiWalk = faceVertexArrays.length - walk - 1\n                sideVertices[0].push(faceVertexArrays[walk][0])\n                sideVertices[1].push(faceVertexArrays[antiWalk][faceVertexArrays[antiWalk].length - 1])\n                sideVertices[2].push(faceVertexArrays[0][walk])\n            }\n            // define adjacency between face vertices and edge vertices\n            for (let walkSide = 0; walkSide < sideVertices.length; walkSide++) {\n                const faceEdges = FACE_EDGES[faceIndex]\n                const edge = edgeVertices[faceEdges[walkSide]]\n                for (let walk = 0; walk < faceVertexArrays.length; walk++) {\n                    const vsVertex = sideVertices[walkSide][walk]\n                    adjacent(vsVertex, edge[walk])\n                    adjacent(vsVertex, edge[walk + 1])\n                }\n            }\n        })\n        PENTAGON_VERTICES.forEach(vertexArray => {\n            // define the adjacency for this pentagon\n            for (let current = 0; current < vertexArray.length; current++) {\n                const next = (current + 1) % vertexArray.length\n                const edgeVertexA = vertexArray[current].front ? 0 : this.frequency - 2\n                const edgeVertexB = vertexArray[next].front ? 0 : this.frequency - 2\n                const vertexA = edgeVertices[vertexArray[current].edge][edgeVertexA]\n                const vertexB = edgeVertices[vertexArray[next].edge][edgeVertexB]\n                adjacent(vertexA, vertexB)\n            }\n        })\n    }\n\n    private vertexBetween(v0: Vertex, v1: Vertex): Vertex {\n        const location = new Vector3().copy(v0.location).lerp(v1.location, 0.5)\n        return this.vertexAt(location)\n    }\n\n    private vertexAt(location: Vector3): Vertex {\n        const length = location.length()\n        location.multiplyScalar(this.radius / length)\n        const index = this.vertices.length\n        const vertex = {index, location, adjacent: []}\n        this.vertices.push(vertex)\n        return vertex\n    }\n}\n\nconst NUL = 0.0\nconst ONE = 0.5257311121191336\nconst PHI = 0.8506508083520400\n\nconst VERTEX: Vector3[] = [\n    new Vector3(+ONE, NUL, +PHI), new Vector3(+ONE, NUL, -PHI),\n    new Vector3(+PHI, +ONE, NUL), new Vector3(-PHI, +ONE, NUL),\n    new Vector3(NUL, +PHI, +ONE), new Vector3(NUL, -PHI, +ONE),\n    new Vector3(-ONE, NUL, -PHI), new Vector3(-ONE, NUL, +PHI),\n    new Vector3(-PHI, -ONE, NUL), new Vector3(+PHI, -ONE, NUL),\n    new Vector3(NUL, -PHI, -ONE), new Vector3(NUL, +PHI, -ONE),\n]\n\nconst EDGE = [\n    [0, 2], [0, 4], [0, 5], [0, 7], [0, 9],\n    [1, 10], [1, 11], [1, 2], [1, 6], [1, 9],\n    [2, 11], [2, 4], [2, 9], [3, 11], [3, 4],\n    [3, 6], [3, 7], [3, 8], [4, 11], [4, 7],\n    [5, 10], [5, 7], [5, 8], [5, 9], [6, 10],\n    [6, 11], [6, 8], [7, 8], [8, 10], [9, 10],\n]\n\nconst FACE_VERTICES = [\n    [0, 2, 4], [0, 2, 9], [0, 4, 7], [0, 5, 7], [0, 5, 9],\n    [1, 2, 11], [1, 2, 9], [1, 6, 10], [1, 6, 11], [1, 9, 10],\n    [2, 4, 11], [3, 4, 11], [3, 4, 7], [3, 6, 11], [3, 6, 8],\n    [3, 7, 8], [5, 7, 8], [5, 8, 10], [5, 9, 10], [6, 8, 10],\n]\n\nconst FACE_EDGES = [\n    [0, 11, 1], [0, 12, 4], [1, 19, 3], [2, 21, 3], [2, 23, 4],\n    [7, 10, 6], [7, 12, 9], [8, 24, 5], [8, 25, 6], [9, 29, 5],\n    [11, 18, 10], [14, 18, 13], [14, 19, 16], [15, 25, 13], [15, 26, 17],\n    [16, 27, 17], [21, 27, 22], [22, 28, 20], [23, 29, 20], [26, 28, 24],\n]\n\ninterface PentagonVertex {\n    edge: number\n    front: boolean\n}\n\nconst PENTAGON_VERTICES: PentagonVertex[][] = [\n    [{edge: 0, front: true}, {edge: 1, front: true},\n        {edge: 3, front: true}, {edge: 2, front: true}, {edge: 4, front: true}],\n    [{edge: 7, front: true}, {edge: 6, front: true},\n        {edge: 8, front: true}, {edge: 5, front: true}, {edge: 9, front: true}],\n    [{edge: 10, front: true}, {edge: 11, front: true},\n        {edge: 0, front: false}, {edge: 12, front: true}, {edge: 7, front: false}],\n    [{edge: 14, front: true}, {edge: 13, front: true},\n        {edge: 15, front: true}, {edge: 17, front: true}, {edge: 16, front: true}],\n    [{edge: 18, front: true}, {edge: 11, front: false},\n        {edge: 1, front: false}, {edge: 19, front: true}, {edge: 14, front: false}],\n    [{edge: 21, front: true}, {edge: 22, front: true},\n        {edge: 20, front: true}, {edge: 23, front: true}, {edge: 2, front: false}],\n    [{edge: 26, front: true}, {edge: 24, front: true},\n        {edge: 8, front: false}, {edge: 25, front: true}, {edge: 15, front: false}],\n    [{edge: 27, front: true}, {edge: 16, front: false},\n        {edge: 19, front: false}, {edge: 3, front: false}, {edge: 21, front: false}],\n    [{edge: 28, front: true}, {edge: 22, front: false},\n        {edge: 27, front: false}, {edge: 17, front: false}, {edge: 26, front: false}],\n    [{edge: 4, front: false}, {edge: 23, front: false},\n        {edge: 29, front: true}, {edge: 9, front: false}, {edge: 12, front: false}],\n    [{edge: 28, front: false}, {edge: 20, front: false},\n        {edge: 29, front: false}, {edge: 5, front: false}, {edge: 24, front: false}],\n    [{edge: 6, front: false}, {edge: 10, front: false},\n        {edge: 18, front: false}, {edge: 13, front: false}, {edge: 25, front: false}],\n]\n\n// sort the adjacent vertices of a vertex in a clockwise way\nfunction sortVertex(vertex: Vertex, chirality: Chirality): void {\n    const outward = new Vector3().copy(vertex.location).normalize()\n    const first = vertex.adjacent.pop()\n    if (!first) {\n        throw new Error(\"No first to pop!\")\n    }\n    const sorted: Vertex[] = [first]\n    const vectorTo = ({location}: Vertex) => new Vector3().subVectors(location, vertex.location).normalize()\n    while (vertex.adjacent.length > 0) {\n        const top: Vertex = sorted[sorted.length - 1]\n        const next = vertex.adjacent.find(v => {\n            const toAdjacent = vectorTo(v)\n            const toTop = vectorTo(top)\n            if (toAdjacent.dot(toTop) < 0.25) {\n                return false\n            }\n            const dotProduct = new Vector3().crossVectors(toTop, toAdjacent).dot(outward)\n            switch (chirality) {\n                case Chirality.Left:\n                    return dotProduct > 0\n                case Chirality.Right:\n                    return dotProduct < 0\n                default:\n                    throw new Error(\"Unknown chirality\")\n            }\n        })\n        if (!next) {\n            throw new Error(\"No next found\")\n        }\n        sorted.push(next)\n        vertex.adjacent = vertex.adjacent.filter(adj => adj.index !== next.index)\n    }\n    vertex.adjacent = sorted\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport {Line3, Plane, Vector3} from \"three\"\n\nimport {DaVinciInterval, DaVinciOutput} from \"./Download\"\nimport {Chirality, Scaffold, Vertex} from \"./Scaffold\"\n\nexport interface Joint {\n    index: number\n    point: Vector3\n}\n\nexport interface Bar {\n    index: number\n    jointA: Joint\n    jointB: Joint\n    jointC: Joint\n    jointD: Joint\n    vertexA: Vertex\n    vertexB: Vertex\n}\n\nexport interface Bolt {\n    index: number\n    jointA: Joint\n    jointB: Joint\n}\n\nexport interface DaVinciResult {\n    bars: Bar[]\n    bolts: Bolt[]\n    joints: Joint[]\n}\n\nexport interface Hub {\n    adjacentBars: Bar[]\n}\n\nfunction barName(vertexA: Vertex, vertexB: Vertex): string {\n    const min = Math.min(vertexA.index, vertexB.index)\n    const max = Math.max(vertexA.index, vertexB.index)\n    return `${min},${max}`\n}\n\nexport function daVinci(scaffold: Scaffold, angle: number): DaVinciResult {\n    const twist = angle * (scaffold.chirality === Chirality.Left ? 1 : -1)\n    const joints: Joint[] = []\n\n    function freshJoint(point: Vector3): Joint {\n        const index = joints.length\n        const node: Joint = {index, point}\n        joints.push(node)\n        return node\n    }\n\n    const bars: Bar[] = []\n    const dictionary: Record<string, Bar> = {}\n    scaffold.vertices.forEach(vertex => {\n        vertex.adjacent.forEach(adjacentVertex => {\n            if (adjacentVertex.index > vertex.index) {\n                return\n            }\n            const index = bars.length\n            const jointA = freshJoint(new Vector3().copy(vertex.location))\n            const jointB = freshJoint(new Vector3())\n            const jointC = freshJoint(new Vector3())\n            const jointD = freshJoint(new Vector3().copy(adjacentVertex.location))\n            const vertexA = vertex\n            const vertexB = adjacentVertex\n            const bar: Bar = {index, jointA, jointD, jointB, jointC, vertexA, vertexB}\n            bars.push(bar)\n            dictionary[barName(bar.vertexA, bar.vertexB)] = bar\n        })\n    })\n    const hubs = scaffold.vertices.map(vertex => {\n        const adjacentBars = vertex.adjacent.map(adjacentVertex => dictionary[barName(vertex, adjacentVertex)])\n        const hub: Hub = {adjacentBars}\n        return hub\n    })\n    bars.forEach(({jointA, jointD}) => {\n        const axis = new Vector3().lerpVectors(jointA.point, jointD.point, 0.5).normalize()\n        jointA.point.applyAxisAngle(axis, twist)\n        jointD.point.applyAxisAngle(axis, twist)\n    })\n\n    function intersect(planeBar: Bar, lineBar: Bar, extendBar: boolean): Joint {\n        const normal = new Vector3().crossVectors(planeBar.jointA.point, planeBar.jointD.point).normalize()\n        const plane = new Plane(normal)\n        const hubA = hubs[planeBar.vertexA.index]\n        const adjacentIndex = hubA.adjacentBars.findIndex(adj => adj.index === planeBar.index)\n        if (adjacentIndex < 0) {\n            throw new Error(\"adjacent not found\")\n        }\n        const extend = (start: Vector3, end: Vector3) =>\n            new Vector3().copy(end).add(new Vector3().subVectors(end, start))\n        const nextLine = new Line3(\n            extend(lineBar.jointA.point, lineBar.jointD.point),\n            extend(lineBar.jointD.point, lineBar.jointA.point),\n        )\n        const intersectionPoint = new Vector3()\n        plane.intersectLine(nextLine, intersectionPoint)\n        const distA = intersectionPoint.distanceTo(lineBar.jointA.point)\n        const distB = intersectionPoint.distanceTo(lineBar.jointD.point)\n        const forward = distA < distB\n        if (forward) {\n            if (extendBar) {\n                lineBar.jointA.point.copy(intersectionPoint)\n                return lineBar.jointA\n            } else {\n                lineBar.jointB.point.copy(intersectionPoint)\n                return lineBar.jointB\n            }\n        } else {\n            if (extendBar) {\n                lineBar.jointD.point.copy(intersectionPoint)\n                return lineBar.jointD\n            } else {\n                lineBar.jointC.point.copy(intersectionPoint)\n                return lineBar.jointC\n            }\n        }\n    }\n\n    const bolts: Bolt [] = []\n    hubs.forEach(hub => {\n        hub.adjacentBars.forEach((currentBar, index) => {\n            const nextIndex = (index + 1) % hub.adjacentBars.length\n            const nextBar = hub.adjacentBars[nextIndex]\n            const nodeA = intersect(currentBar, nextBar, true)\n            const nodeB = intersect(nextBar, currentBar, false)\n            const bolt: Bolt = {jointA: nodeA, jointB: nodeB, index: bars.length + bolts.length}\n            bolts.push(bolt)\n        })\n    })\n    return {bars, bolts, joints}\n}\n\nexport function radiansToDegrees(radian: number): number {\n    return 180 / (radian * Math.PI)\n}\n\nexport function degreesToRadians(degree: number): number {\n    return Math.PI * degree / 180\n}\n\nexport function daVinciOutput({bars, bolts, joints}: DaVinciResult): DaVinciOutput {\n    const daVinciIntervals: DaVinciInterval [] = []\n    bars.forEach((bar) => {\n        daVinciIntervals.push({\n            nodeIndexes: [bar.jointA.index, bar.jointB.index, bar.jointC.index, bar.jointD.index],\n            type: \"type 1\",\n        })\n    })\n    bolts.forEach((bolt) => {\n        daVinciIntervals.push({\n            nodeIndexes: [bolt.jointA.index, bolt.jointB.index],\n            type: \"type 2\",\n        })\n    })\n    return {joints, daVinciIntervals}\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport * as React from \"react\"\nimport {useState} from \"react\"\nimport {Button, Col, Container, Form, FormGroup, Input, Label, Row} from \"reactstrap\"\n\nexport interface DaVinciSpec {\n    frequency: number\n    degrees: number\n    radius: number\n    boltWidth: number\n    barWidth: number\n    barHeight: number\n    barExtension: number\n    boltExtension: number\n}\n\nexport function SpecDisplay({spec}: { spec: DaVinciSpec }): JSX.Element {\n    return (\n        <div className=\"top-middle\">\n            frequency={spec.frequency}&nbsp;\n            degrees={spec.degrees}&nbsp;\n            radius={spec.radius}&nbsp;\n            bar-area=({spec.barWidth}x{spec.barHeight})&nbsp;\n            bar-extend={spec.barExtension}&nbsp;\n            bolt-extend={spec.boltExtension}&nbsp;\n        </div>\n    )\n}\n\nexport function SpecEditor({spec, setSpec}: { spec: DaVinciSpec, setSpec: (spec: DaVinciSpec) => void }): JSX.Element {\n    const [frequency, setFrequency] = useState(spec.frequency.toString())\n    const [degrees, setDegrees] = useState(spec.degrees.toString())\n    const [radius, setRadius] = useState(spec.radius.toString())\n    const [boltWidth, setBoltWidth] = useState(spec.boltWidth.toString())\n    const [barWidth, setBarWidth] = useState(spec.barWidth.toString())\n    const [barHeight, setBarHeight] = useState(spec.barHeight.toString())\n    const [barExtension, setBarExtension] = useState(spec.barExtension.toString())\n    const [boltExtension, setBoltExtension] = useState(spec.boltExtension.toString())\n\n    function handleSubmit(): void {\n        const daVinciSpec: DaVinciSpec = {\n            frequency: parseInt(frequency, 10),\n            degrees: parseFloat(degrees),\n            radius: parseFloat(radius),\n            boltWidth: parseFloat(boltWidth),\n            barWidth: parseFloat(barWidth),\n            barHeight: parseFloat(barHeight),\n            barExtension: parseFloat(barExtension),\n            boltExtension: parseFloat(boltExtension),\n        }\n        if (!(!isFrequencyValid(frequency) || isNaN(daVinciSpec.degrees) || isNaN(daVinciSpec.radius) ||\n            isNaN(daVinciSpec.boltWidth) || isNaN(daVinciSpec.barWidth) || isNaN(daVinciSpec.barHeight)\n            || isNaN(daVinciSpec.barExtension) || isNaN(daVinciSpec.boltExtension))) {\n            setSpec(daVinciSpec)\n        }\n    }\n\n    function isFrequencyValid(value: string): boolean {\n        const f = parseInt(value, 10)\n        if (isNaN(f)) {\n            return false\n        }\n        return f <= 10 && f > 0\n    }\n\n    return (\n        <Form onSubmit={event => {\n            event.preventDefault()\n            handleSubmit()\n        }} className=\"bg-light spec-editor\">\n            <FormGroup className=\"align-content-center w-100\">\n                <h3><a target=\"_BLANK\" href=\"https://github.com/CivilSource/DavinciDome\">Da Vinci Dome</a></h3>\n            </FormGroup>\n            <hr/>\n            <Container>\n                <Row>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"frequency\">Frequency (1-10)</Label>\n                            <Input id=\"frequency\"\n                                   value={frequency}\n                                   valid={isFrequencyValid(frequency)}\n                                   invalid={!isFrequencyValid(frequency)}\n                                   onChange={({target}) => setFrequency(target.value)}/>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"degrees\">Degrees</Label>\n                            <Input id=\"degrees\"\n                                   value={degrees}\n                                   valid={!isNaN(parseFloat(degrees))}\n                                   invalid={isNaN(parseFloat(degrees))}\n                                   onChange={({target}) => setDegrees(target.value)}/>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"radius\">Radius</Label>\n                            <Input id=\"radius\"\n                                   value={radius}\n                                   valid={!isNaN(parseFloat(radius))}\n                                   invalid={isNaN(parseFloat(radius))}\n                                   onChange={({target}) => setRadius(target.value)}/>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"boltWidth\">Bolt Width</Label>\n                            <Input id=\"boltWidth\"\n                                   value={boltWidth}\n                                   valid={!isNaN(parseFloat(boltWidth))}\n                                   invalid={isNaN(parseFloat(boltWidth))}\n                                   onChange={({target}) => setBoltWidth(target.value)}/>\n                        </FormGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"barWidth\">Bar Width</Label>\n                            <Input id=\"barWidth\"\n                                   value={barWidth}\n                                   valid={!isNaN(parseFloat(barWidth))}\n                                   invalid={isNaN(parseFloat(barWidth))}\n                                   onChange={({target}) => setBarWidth(target.value)}/>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"barHeight\">Bar Height</Label>\n                            <Input id=\"barHeight\"\n                                   value={barHeight}\n                                   valid={!isNaN(parseFloat(barHeight))}\n                                   invalid={isNaN(parseFloat(barHeight))}\n                                   onChange={({target}) => setBarHeight(target.value)}/>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"boltExtension\">Bolt Extension</Label>\n                            <Input id=\"boltExtension\"\n                                   value={boltExtension}\n                                   valid={!isNaN(parseFloat(boltExtension))}\n                                   invalid={isNaN(parseFloat(boltExtension))}\n                                   onChange={({target}) => setBoltExtension(target.value)}/>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"barExtension\">Bar Extension</Label>\n                            <Input id=\"barExtension\"\n                                   value={barExtension}\n                                   valid={!isNaN(parseFloat(barExtension))}\n                                   invalid={isNaN(parseFloat(barExtension))}\n                                   onChange={({target}) => setBarExtension(target.value)}/>\n                        </FormGroup>\n                    </Col>\n                </Row>\n            </Container>\n            <hr/>\n            <FormGroup>\n                <Button className=\"w-100\" type=\"submit\">Generate</Button>\n            </FormGroup>\n        </Form>\n    )\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport FileSaver from \"file-saver\"\nimport JSZip from \"jszip\"\n\nimport {Joint} from \"./DaVinci\"\n\nexport interface DaVinciInterval {\n    nodeIndexes: number[]\n    type: string\n}\n\nexport interface DaVinciOutput {\n    joints: Joint[]\n    daVinciIntervals: DaVinciInterval[]\n}\n\nfunction extractNodeFile(output: DaVinciOutput): string {\n    const rows: string[][] = []\n    rows.push([\"index\", \"x\", \"y\", \"z\"])\n    output.joints.forEach((joint, index) => rows.push([\n        (index + 1).toFixed(0),\n        csvNumber(joint.point.x), csvNumber(joint.point.y), csvNumber(joint.point.z),\n    ]))\n    return rows.map(row => row.join(\";\")).join(\"\\n\")\n}\n\nfunction extractIntervalFile(output: DaVinciOutput): string {\n    const rows: string[][] = []\n    rows.push([\"joints\", \"type\"])\n    output.daVinciIntervals.forEach((interval, index) => {\n        const indexString = interval.nodeIndexes.map(i => i + 1).join(\",\")\n        rows.push([`\"=\"\"${indexString}\"\"\"`, interval.type])\n    })\n    return rows.map(row => row.join(\";\")).join(\"\\n\")\n}\n\nfunction csvNumber(n: number): string {\n    return n.toFixed(5).replace(/[.]/, \",\")\n}\n\nfunction dateString(): string {\n    return new Date().toISOString()\n        .replace(/[.].*/, \"\").replace(/[:T_]/g, \"-\")\n}\n\nexport function saveCSVZip(output: DaVinciOutput): void {\n    const zip = new JSZip()\n    zip.file(\"joints.csv\", extractNodeFile(output))\n    zip.file(\"intervals.csv\", extractIntervalFile(output))\n    zip.generateAsync({type: \"blob\", mimeType: \"application/zip\"}).then(blob => {\n        FileSaver.saveAs(blob, `davinci-${dateString()}.zip`)\n    })\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport * as React from \"react\"\nimport {Euler, Matrix4, Quaternion, Vector3} from \"three\"\n\nimport {Bar, Bolt} from \"./DaVinci\"\nimport {DaVinciSpec} from \"./DaVinciSpec\"\n\n\nexport function Ball({position, radius}: {\n    position: Vector3,\n    radius: number,\n}): JSX.Element {\n    return (\n        <mesh position={position}>\n            <sphereGeometry args={[radius, 32, 16]}/>\n            <meshPhongMaterial color=\"green\"/>\n        </mesh>\n    )\n}\n\nconst UP = new Vector3(0, 1, 0)\nconst DOWN = new Vector3(0, -1, 0)\n\nexport function BarBox({bar, renderSpec}: { bar: Bar, renderSpec: DaVinciSpec }): JSX.Element {\n    const length = bar.jointA.point.distanceTo(bar.jointD.point)\n    const unit = new Vector3().subVectors(bar.jointD.point, bar.jointA.point).normalize()\n    const midpoint = new Vector3().lerpVectors(bar.jointA.point, bar.jointD.point, 0.5)\n    const tangent = new Vector3().crossVectors(midpoint, unit).normalize()\n    const basis = new Matrix4()\n        .makeBasis(new Vector3().copy(midpoint).normalize(), unit, tangent)\n        .setPosition(midpoint)\n        .scale(new Vector3(renderSpec.barHeight, length + renderSpec.barExtension, renderSpec.barWidth))\n    return (\n        <mesh matrix={basis} matrixAutoUpdate={false}>\n            <boxBufferGeometry attach=\"geometry\"/>\n            <meshLambertMaterial attach=\"material\" color=\"white\"/>\n        </mesh>\n    )\n}\n\nexport function BoltCylinder({bolt, renderSpec}: { bolt: Bolt, renderSpec: DaVinciSpec }): JSX.Element {\n    const length = bolt.jointA.point.distanceTo(bolt.jointB.point)\n    const unit = new Vector3().subVectors(bolt.jointB.point, bolt.jointA.point).normalize()\n    const position = new Vector3().lerpVectors(bolt.jointA.point, bolt.jointB.point, 0.5)\n    const scale = new Vector3(renderSpec.boltWidth, length + renderSpec.boltExtension, renderSpec.boltWidth)\n    const dot = UP.dot(unit)\n    const rotation = new Euler().setFromQuaternion(new Quaternion().setFromUnitVectors(dot > 0 ? UP : DOWN, unit))\n    return (\n        <mesh scale={scale} rotation={rotation} position={position}>\n            <cylinderBufferGeometry attach=\"geometry\" args={[1, 1, 1]}/>\n            <meshLambertMaterial attach=\"material\" color=\"orange\"/>\n        </mesh>\n    )\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport {OrbitControls, PerspectiveCamera} from \"@react-three/drei\"\nimport {Canvas} from \"@react-three/fiber\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport * as React from \"react\"\nimport {useEffect, useState} from \"react\"\nimport {Button, Col, Container, Row} from \"reactstrap\"\n\nimport \"./App.css\"\nimport {daVinci, daVinciOutput, DaVinciResult, degreesToRadians} from \"./DaVinci\"\nimport {DaVinciSpec, SpecDisplay, SpecEditor} from \"./DaVinciSpec\"\nimport {saveCSVZip} from \"./Download\"\nimport {BarBox, BoltCylinder} from \"./Parts\"\nimport {Chirality, Scaffold} from \"./Scaffold\"\n\nconst INITIAL_RENDER_SPEC: DaVinciSpec = {\n    frequency: 2,\n    degrees: 30,\n    radius: 7,\n    boltWidth: 0.05,\n    barWidth: 0.3,\n    barHeight: 0.02,\n    barExtension: 0.3,\n    boltExtension: 0.2,\n}\nconst chiralityFromSpec = ({degrees}: DaVinciSpec) => degrees > 0 ? Chirality.Right : Chirality.Left\n\nfunction App(): JSX.Element {\n    const [renderSpec, setRenderSpec] = useState(INITIAL_RENDER_SPEC)\n    const [scaffold, setScaffold] = useState<Scaffold>(new Scaffold(renderSpec.frequency, renderSpec.radius, chiralityFromSpec(renderSpec)))\n    const [daVinciResult, setDaVinciResult] = useState<DaVinciResult | undefined>(daVinci(scaffold, degreesToRadians(renderSpec.degrees)))\n    const [version, setVersion] = useState(0)\n    useEffect(() => {\n        const {frequency, radius, degrees} = renderSpec\n        const radians = Math.abs(degreesToRadians(degrees))\n        const freshScaffold = new Scaffold(frequency, radius, chiralityFromSpec(renderSpec))\n        setScaffold(freshScaffold)\n        setDaVinciResult(daVinci(freshScaffold, radians))\n        setVersion(v => v + 1)\n    }, [renderSpec])\n    return (\n        <div className=\"App\">\n            {!daVinciResult ? (\n                <div className=\"w-100 h-100\">\n                    <SpecEditor spec={renderSpec} setSpec={spec => setRenderSpec(spec)}/>\n                </div>\n            ) : (\n                <>\n                    <SpecDisplay spec={renderSpec}/>\n                    <Button className=\"bottom-left\" onClick={() => setDaVinciResult(undefined)}>Change Parameters</Button>\n                    <Button className=\"bottom-right\" onClick={() => saveCSVZip(daVinciOutput(daVinciResult))}>Download CSV</Button>\n                    <Canvas className=\"Canvas\">\n                        <ambientLight intensity={0.05}/>\n                        <mesh onDoubleClick={event => {\n                            const face = event.face\n                            if (!face) {\n                                return\n                            }\n                            const position = face.normal.multiplyScalar(event.camera.position.length())\n                            event.camera.position.copy(position)\n                        }}>\n                            <boxGeometry args={[1, 1, 1]}/>\n                            <meshStandardMaterial transparent={true} opacity={0.8} color=\"orange\"/>\n                        </mesh>\n                        {daVinciResult.bars.map((bar, index) => (\n                            <BarBox key={`bar-${version}-#${index}`} bar={bar} renderSpec={renderSpec}/>\n                        ))}\n                        {daVinciResult.bolts.map((bolt, index) => (\n                            <BoltCylinder key={`bolt-${version}-#${index}`} bolt={bolt} renderSpec={renderSpec}/>\n                        ))}\n                        <PerspectiveCamera makeDefault={true} position={[renderSpec.radius * 3, 0, 0]}>\n                            <pointLight position={[0, 10 * renderSpec.radius, 0]} color=\"white\"/>\n                        </PerspectiveCamera>\n                        <OrbitControls/>\n                    </Canvas>\n                </>\n            )}\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}