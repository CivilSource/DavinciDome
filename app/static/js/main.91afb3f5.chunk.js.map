{"version":3,"sources":["Scaffold.ts","DaVinci.ts","DaVinciSpec.tsx","Download.ts","Parts.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["adjacent","v0","v1","push","Chirality","Scaffold","constructor","frequency","radius","chirality","vertices","VERTEX","forEach","location","this","vertexAt","EDGE","edge","midVertices","map","midEdge","vertexBetween","FACE_EDGES","faceEdge","side0","side1","side2","buildFaces","buildEdgeVertices","vertex","outward","Vector3","copy","normalize","first","pop","Error","sorted","vectorTo","subVectors","length","top","next","find","v","toAdjacent","toTop","dot","dotProduct","crossVectors","Left","Right","filter","adj","index","sortVertex","edgeVertices","edgeVertexIndex","verticesOfEdge","previousVertex","walk","loc0","loc1","spot","lerpVectors","faceVertexArrays","FACE_VERTICES","faceVertexIndex","faceIndex","faceVertex","which","origin","walkA","vectorA","sub","walkB","v2","vectorB","add","row","rowMember","vert","sideVertices","antiWalk","walkSide","faceEdges","vsVertex","PENTAGON_VERTICES","vertexArray","current","edgeVertexA","front","edgeVertexB","lerp","multiplyScalar","ONE","PHI","barName","vertexA","vertexB","min","Math","max","daVinci","scaffold","angle","twist","joints","freshJoint","point","node","bars","dictionary","adjacentVertex","jointA","jointB","jointC","bar","jointD","hubs","adjacentBars","intersect","planeBar","lineBar","extendBar","normal","plane","Plane","findIndex","extend","start","end","nextLine","Line3","intersectionPoint","intersectLine","distanceTo","axis","applyAxisAngle","bolts","hub","currentBar","nextIndex","nextBar","bolt","degreesToRadians","degree","PI","MILLIS","SpecEditor","spec","setSpec","saveCSV","setFrequency","useState","toString","degrees","setDegrees","setRadius","boltWidth","setBoltWidth","barWidth","setBarWidth","barHeight","setBarHeight","barExtension","setBarExtension","boltExtension","setBoltExtension","isFrequencyValid","value","f","parseInt","isNaN","onSubmit","event","preventDefault","daVinciSpec","parseFloat","handleSubmit","className","target","href","for","id","valid","invalid","onChange","color","type","onClick","csvNumber","n","toFixed","replace","saveCSVZip","output","zip","JSZip","file","rows","joint","x","y","z","join","extractNodeFile","daVinciIntervals","interval","indexString","nodeIndexes","i","extractIntervalFile","generateAsync","mimeType","then","blob","FileSaver","saveAs","Date","toISOString","UP","DOWN","BarBox","renderSpec","unit","midpoint","tangent","basis","Matrix4","makeBasis","setPosition","scale","matrix","matrixAutoUpdate","attach","BoltCylinder","position","rotation","Euler","setFromQuaternion","Quaternion","setFromUnitVectors","args","INITIAL_RENDER_SPEC","chiralityFromSpec","App","size","setSize","window","innerWidth","innerHeight","setRenderSpec","daVinciResult","setDaVinciResult","version","setVersion","useEffect","checkSize","addEventListener","removeEventListener","radians","abs","console","log","style","width","height","daVinciOutput","intensity","onDoubleClick","face","camera","transparent","opacity","PerspectiveCamera","makeDefault","OrbitControls","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91afb3f5.chunk.js","sourcesContent":["/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport {Vector3} from \"three\"\n\nexport interface Vertex {\n    index: number,\n    location: Vector3\n    adjacent: Vertex[]\n}\n\nfunction adjacent(v0: Vertex, v1: Vertex): void {\n    v0.adjacent.push(v1)\n    v1.adjacent.push(v0)\n}\n\nexport enum Chirality {\n    Left, Right,\n}\n\nexport class Scaffold {\n    public readonly vertices: Vertex[] = []\n\n    constructor(public readonly frequency: number, public readonly radius: number, public readonly chirality: Chirality) {\n        VERTEX.forEach(location => this.vertexAt(location))\n        if (frequency === 1) {\n            EDGE.forEach(edge => {\n                const v0 = this.vertices[edge[0]]\n                const v1 = this.vertices[edge[1]]\n                adjacent(v0, v1)\n            })\n        } else if (frequency === 2) {\n            const midVertices = EDGE.map(edge => {\n                const v0 = this.vertices[edge[0]]\n                const v1 = this.vertices[edge[1]]\n                const midEdge = this.vertexBetween(v0, v1)\n                adjacent(v0, midEdge)\n                adjacent(midEdge, v1)\n                return midEdge\n            })\n            FACE_EDGES.forEach(faceEdge => {\n                const side0 = midVertices[faceEdge[0]]\n                const side1 = midVertices[faceEdge[1]]\n                const side2 = midVertices[faceEdge[2]]\n                adjacent(side0, side1)\n                adjacent(side1, side2)\n                adjacent(side2, side0)\n            })\n        } else {\n            this.buildFaces(this.buildEdgeVertices())\n        }\n        this.vertices.forEach(vertex => sortVertex(vertex, chirality))\n    }\n\n    private buildEdgeVertices(): Vertex[][] {\n        const edgeVertices: Vertex[][] = []\n        EDGE.forEach(edgeVertexIndex => {\n            const verticesOfEdge: Vertex[] = []\n            edgeVertices.push(verticesOfEdge)\n            let vertex: Vertex | undefined\n            let previousVertex: Vertex | undefined\n            for (let walk = 0; walk < this.frequency - 1; walk++) {\n                previousVertex = vertex\n                const v0 = this.vertices[edgeVertexIndex[0]]\n                const v1 = this.vertices[edgeVertexIndex[1]]\n                const loc0 = v0.location\n                const loc1 = v1.location\n                const spot = new Vector3().lerpVectors(loc0, loc1, (walk + 1) / this.frequency)\n                vertex = this.vertexAt(spot)\n                verticesOfEdge.push(vertex)\n                if (previousVertex) {\n                    adjacent(vertex, previousVertex)\n                    if (walk === this.frequency - 2) {\n                        adjacent(vertex, v1)\n                    }\n                } else {\n                    adjacent(vertex, v0)\n                }\n            }\n        })\n        return edgeVertices\n    }\n\n    private buildFaces(edgeVertices: Vertex[][]): void {\n        const faceVertexArrays: Vertex[][] = []\n        FACE_VERTICES.forEach((faceVertexIndex, faceIndex) => {\n            const faceVertex = (which: number) => this.vertices[faceVertexIndex[which]]\n            const v0 = faceVertex(0)\n            const origin = v0.location\n            // interpolate along the edges of the face creating arrays of vertices on the way\n            for (let walkA = 1; walkA < this.frequency - 1; walkA++) {\n                const v1 = faceVertex(1)\n                const vectorA = new Vector3().lerpVectors(origin, v1.location, walkA / this.frequency)\n                vectorA.sub(origin)\n                faceVertexArrays[walkA - 1] = []\n                for (let walkB = 1; walkB < this.frequency - walkA; walkB++) {\n                    const v2 = faceVertex(2)\n                    const vectorB = new Vector3().lerpVectors(origin, v2.location, walkB / this.frequency)\n                    vectorB.sub(origin)\n                    const spot = new Vector3().copy(origin)\n                    spot.add(vectorA)\n                    spot.add(vectorB)\n                    faceVertexArrays[walkA - 1].push(this.vertexAt(spot))\n                }\n            }\n            // define the adjacency among face vertices\n            for (let row = 0; row < faceVertexArrays.length; row++) {\n                for (let rowMember = 0; rowMember < faceVertexArrays[row].length; rowMember++) {\n                    if (rowMember < faceVertexArrays[row].length - 1) {\n                        adjacent(faceVertexArrays[row][rowMember], faceVertexArrays[row][rowMember + 1])\n                    }\n                    if (row > 0) {\n                        const vert = faceVertexArrays[row][rowMember]\n                        adjacent(vert, faceVertexArrays[row - 1][rowMember])\n                        adjacent(vert, faceVertexArrays[row - 1][rowMember + 1])\n                    }\n                }\n            }\n            // compile side vertices (of a triangle!) reversing traversal when necessary\n            const sideVertices: Vertex[] [] = [[], [], []]\n            for (let walk = 0; walk < this.frequency - 2; walk++) {\n                const antiWalk = faceVertexArrays.length - walk - 1\n                sideVertices[0].push(faceVertexArrays[walk][0])\n                sideVertices[1].push(faceVertexArrays[antiWalk][faceVertexArrays[antiWalk].length - 1])\n                sideVertices[2].push(faceVertexArrays[0][walk])\n            }\n            // define adjacency between face vertices and edge vertices\n            for (let walkSide = 0; walkSide < sideVertices.length; walkSide++) {\n                const faceEdges = FACE_EDGES[faceIndex]\n                const edge = edgeVertices[faceEdges[walkSide]]\n                for (let walk = 0; walk < faceVertexArrays.length; walk++) {\n                    const vsVertex = sideVertices[walkSide][walk]\n                    adjacent(vsVertex, edge[walk])\n                    adjacent(vsVertex, edge[walk + 1])\n                }\n            }\n        })\n        PENTAGON_VERTICES.forEach(vertexArray => {\n            // define the adjacency for this pentagon\n            for (let current = 0; current < vertexArray.length; current++) {\n                const next = (current + 1) % vertexArray.length\n                const edgeVertexA = vertexArray[current].front ? 0 : this.frequency - 2\n                const edgeVertexB = vertexArray[next].front ? 0 : this.frequency - 2\n                const vertexA = edgeVertices[vertexArray[current].edge][edgeVertexA]\n                const vertexB = edgeVertices[vertexArray[next].edge][edgeVertexB]\n                adjacent(vertexA, vertexB)\n            }\n        })\n    }\n\n    private vertexBetween(v0: Vertex, v1: Vertex): Vertex {\n        const location = new Vector3().copy(v0.location).lerp(v1.location, 0.5)\n        return this.vertexAt(location)\n    }\n\n    private vertexAt(location: Vector3): Vertex {\n        const length = location.length()\n        location.multiplyScalar(this.radius / length)\n        const index = this.vertices.length\n        const vertex = {index, location, adjacent: []}\n        this.vertices.push(vertex)\n        return vertex\n    }\n}\n\nconst NUL = 0.0\nconst ONE = 0.5257311121191336\nconst PHI = 0.8506508083520400\n\nconst VERTEX: Vector3[] = [\n    new Vector3(+ONE, NUL, +PHI), new Vector3(+ONE, NUL, -PHI),\n    new Vector3(+PHI, +ONE, NUL), new Vector3(-PHI, +ONE, NUL),\n    new Vector3(NUL, +PHI, +ONE), new Vector3(NUL, -PHI, +ONE),\n    new Vector3(-ONE, NUL, -PHI), new Vector3(-ONE, NUL, +PHI),\n    new Vector3(-PHI, -ONE, NUL), new Vector3(+PHI, -ONE, NUL),\n    new Vector3(NUL, -PHI, -ONE), new Vector3(NUL, +PHI, -ONE),\n]\n\nconst EDGE = [\n    [0, 2], [0, 4], [0, 5], [0, 7], [0, 9],\n    [1, 10], [1, 11], [1, 2], [1, 6], [1, 9],\n    [2, 11], [2, 4], [2, 9], [3, 11], [3, 4],\n    [3, 6], [3, 7], [3, 8], [4, 11], [4, 7],\n    [5, 10], [5, 7], [5, 8], [5, 9], [6, 10],\n    [6, 11], [6, 8], [7, 8], [8, 10], [9, 10],\n]\n\nconst FACE_VERTICES = [\n    [0, 2, 4], [0, 2, 9], [0, 4, 7], [0, 5, 7], [0, 5, 9],\n    [1, 2, 11], [1, 2, 9], [1, 6, 10], [1, 6, 11], [1, 9, 10],\n    [2, 4, 11], [3, 4, 11], [3, 4, 7], [3, 6, 11], [3, 6, 8],\n    [3, 7, 8], [5, 7, 8], [5, 8, 10], [5, 9, 10], [6, 8, 10],\n]\n\nconst FACE_EDGES = [\n    [0, 11, 1], [0, 12, 4], [1, 19, 3], [2, 21, 3], [2, 23, 4],\n    [7, 10, 6], [7, 12, 9], [8, 24, 5], [8, 25, 6], [9, 29, 5],\n    [11, 18, 10], [14, 18, 13], [14, 19, 16], [15, 25, 13], [15, 26, 17],\n    [16, 27, 17], [21, 27, 22], [22, 28, 20], [23, 29, 20], [26, 28, 24],\n]\n\ninterface PentagonVertex {\n    edge: number\n    front: boolean\n}\n\nconst PENTAGON_VERTICES: PentagonVertex[][] = [\n    [{edge: 0, front: true}, {edge: 1, front: true},\n        {edge: 3, front: true}, {edge: 2, front: true}, {edge: 4, front: true}],\n    [{edge: 7, front: true}, {edge: 6, front: true},\n        {edge: 8, front: true}, {edge: 5, front: true}, {edge: 9, front: true}],\n    [{edge: 10, front: true}, {edge: 11, front: true},\n        {edge: 0, front: false}, {edge: 12, front: true}, {edge: 7, front: false}],\n    [{edge: 14, front: true}, {edge: 13, front: true},\n        {edge: 15, front: true}, {edge: 17, front: true}, {edge: 16, front: true}],\n    [{edge: 18, front: true}, {edge: 11, front: false},\n        {edge: 1, front: false}, {edge: 19, front: true}, {edge: 14, front: false}],\n    [{edge: 21, front: true}, {edge: 22, front: true},\n        {edge: 20, front: true}, {edge: 23, front: true}, {edge: 2, front: false}],\n    [{edge: 26, front: true}, {edge: 24, front: true},\n        {edge: 8, front: false}, {edge: 25, front: true}, {edge: 15, front: false}],\n    [{edge: 27, front: true}, {edge: 16, front: false},\n        {edge: 19, front: false}, {edge: 3, front: false}, {edge: 21, front: false}],\n    [{edge: 28, front: true}, {edge: 22, front: false},\n        {edge: 27, front: false}, {edge: 17, front: false}, {edge: 26, front: false}],\n    [{edge: 4, front: false}, {edge: 23, front: false},\n        {edge: 29, front: true}, {edge: 9, front: false}, {edge: 12, front: false}],\n    [{edge: 28, front: false}, {edge: 20, front: false},\n        {edge: 29, front: false}, {edge: 5, front: false}, {edge: 24, front: false}],\n    [{edge: 6, front: false}, {edge: 10, front: false},\n        {edge: 18, front: false}, {edge: 13, front: false}, {edge: 25, front: false}],\n]\n\n// sort the adjacent vertices of a vertex in a clockwise way\nfunction sortVertex(vertex: Vertex, chirality: Chirality): void {\n    const outward = new Vector3().copy(vertex.location).normalize()\n    const first = vertex.adjacent.pop()\n    if (!first) {\n        throw new Error(\"No first to pop!\")\n    }\n    const sorted: Vertex[] = [first]\n    const vectorTo = ({location}: Vertex) => new Vector3().subVectors(location, vertex.location).normalize()\n    while (vertex.adjacent.length > 0) {\n        const top: Vertex = sorted[sorted.length - 1]\n        const next = vertex.adjacent.find(v => {\n            const toAdjacent = vectorTo(v)\n            const toTop = vectorTo(top)\n            if (toAdjacent.dot(toTop) < 0.25) {\n                return false\n            }\n            const dotProduct = new Vector3().crossVectors(toTop, toAdjacent).dot(outward)\n            switch (chirality) {\n                case Chirality.Left:\n                    return dotProduct > 0\n                case Chirality.Right:\n                    return dotProduct < 0\n                default:\n                    throw new Error(\"Unknown chirality\")\n            }\n        })\n        if (!next) {\n            throw new Error(\"No next found\")\n        }\n        sorted.push(next)\n        vertex.adjacent = vertex.adjacent.filter(adj => adj.index !== next.index)\n    }\n    vertex.adjacent = sorted\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport {Line3, Plane, Vector3} from \"three\"\n\nimport {DaVinciInterval, DaVinciOutput} from \"./Download\"\nimport {Chirality, Scaffold, Vertex} from \"./Scaffold\"\n\nexport interface Joint {\n    index: number\n    point: Vector3\n}\n\nexport interface Bar {\n    index: number\n    jointA: Joint\n    jointB: Joint\n    jointC: Joint\n    jointD: Joint\n    vertexA: Vertex\n    vertexB: Vertex\n}\n\nexport interface Bolt {\n    index: number\n    jointA: Joint\n    jointB: Joint\n}\n\nexport interface DaVinciResult {\n    bars: Bar[]\n    bolts: Bolt[]\n    joints: Joint[]\n}\n\nexport interface Hub {\n    adjacentBars: Bar[]\n}\n\nfunction barName(vertexA: Vertex, vertexB: Vertex): string {\n    const min = Math.min(vertexA.index, vertexB.index)\n    const max = Math.max(vertexA.index, vertexB.index)\n    return `${min},${max}`\n}\n\nexport function daVinci(scaffold: Scaffold, angle: number): DaVinciResult {\n    const twist = angle * (scaffold.chirality === Chirality.Left ? 1 : -1)\n    const joints: Joint[] = []\n\n    function freshJoint(point: Vector3): Joint {\n        const index = joints.length\n        const node: Joint = {index, point}\n        joints.push(node)\n        return node\n    }\n\n    const bars: Bar[] = []\n    const dictionary: Record<string, Bar> = {}\n    scaffold.vertices.forEach(vertex => {\n        vertex.adjacent.forEach(adjacentVertex => {\n            if (adjacentVertex.index > vertex.index) {\n                return\n            }\n            const index = bars.length\n            const jointA = freshJoint(new Vector3().copy(vertex.location))\n            const jointB = freshJoint(new Vector3())\n            const jointC = freshJoint(new Vector3())\n            const jointD = freshJoint(new Vector3().copy(adjacentVertex.location))\n            const vertexA = vertex\n            const vertexB = adjacentVertex\n            const bar: Bar = {index, jointA, jointD, jointB, jointC, vertexA, vertexB}\n            bars.push(bar)\n            dictionary[barName(bar.vertexA, bar.vertexB)] = bar\n        })\n    })\n    const hubs = scaffold.vertices.map(vertex => {\n        const adjacentBars = vertex.adjacent.map(adjacentVertex => dictionary[barName(vertex, adjacentVertex)])\n        const hub: Hub = {adjacentBars}\n        return hub\n    })\n    bars.forEach(({jointA, jointD}) => {\n        const axis = new Vector3().lerpVectors(jointA.point, jointD.point, 0.5).normalize()\n        jointA.point.applyAxisAngle(axis, twist)\n        jointD.point.applyAxisAngle(axis, twist)\n    })\n\n    function intersect(planeBar: Bar, lineBar: Bar, extendBar: boolean): Joint {\n        const normal = new Vector3().crossVectors(planeBar.jointA.point, planeBar.jointD.point).normalize()\n        const plane = new Plane(normal)\n        const hubA = hubs[planeBar.vertexA.index]\n        const adjacentIndex = hubA.adjacentBars.findIndex(adj => adj.index === planeBar.index)\n        if (adjacentIndex < 0) {\n            throw new Error(\"adjacent not found\")\n        }\n        const extend = (start: Vector3, end: Vector3) =>\n            new Vector3().copy(end).add(new Vector3().subVectors(end, start))\n        const nextLine = new Line3(\n            extend(lineBar.jointA.point, lineBar.jointD.point),\n            extend(lineBar.jointD.point, lineBar.jointA.point),\n        )\n        const intersectionPoint = new Vector3()\n        plane.intersectLine(nextLine, intersectionPoint)\n        const distA = intersectionPoint.distanceTo(lineBar.jointA.point)\n        const distB = intersectionPoint.distanceTo(lineBar.jointD.point)\n        const forward = distA < distB\n        if (forward) {\n            if (extendBar) {\n                lineBar.jointA.point.copy(intersectionPoint)\n                return lineBar.jointA\n            } else {\n                lineBar.jointB.point.copy(intersectionPoint)\n                return lineBar.jointB\n            }\n        } else {\n            if (extendBar) {\n                lineBar.jointD.point.copy(intersectionPoint)\n                return lineBar.jointD\n            } else {\n                lineBar.jointC.point.copy(intersectionPoint)\n                return lineBar.jointC\n            }\n        }\n    }\n\n    const bolts: Bolt [] = []\n    hubs.forEach(hub => {\n        hub.adjacentBars.forEach((currentBar, index) => {\n            const nextIndex = (index + 1) % hub.adjacentBars.length\n            const nextBar = hub.adjacentBars[nextIndex]\n            const nodeA = intersect(currentBar, nextBar, true)\n            const nodeB = intersect(nextBar, currentBar, false)\n            const bolt: Bolt = {jointA: nodeA, jointB: nodeB, index: bars.length + bolts.length}\n            bolts.push(bolt)\n        })\n    })\n    return {bars, bolts, joints}\n}\n\nexport function radiansToDegrees(radian: number): number {\n    return 180 / (radian * Math.PI)\n}\n\nexport function degreesToRadians(degree: number): number {\n    return Math.PI * degree / 180\n}\n\nexport function daVinciOutput({bars, bolts, joints}: DaVinciResult): DaVinciOutput {\n    const daVinciIntervals: DaVinciInterval [] = []\n    bars.forEach((bar) => {\n        daVinciIntervals.push({\n            nodeIndexes: [bar.jointA.index, bar.jointB.index, bar.jointC.index, bar.jointD.index],\n            type: \"type 1\",\n        })\n    })\n    bolts.forEach((bolt) => {\n        daVinciIntervals.push({\n            nodeIndexes: [bolt.jointA.index, bolt.jointB.index],\n            type: \"type 2\",\n        })\n    })\n    return {joints, daVinciIntervals}\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport * as React from \"react\"\nimport {useState} from \"react\"\nimport {Button, Form, FormGroup, Input, Label} from \"reactstrap\"\n\nconst MILLIS = 1000\n\nexport interface DaVinciSpec {\n    frequency: number\n    degrees: number\n    radius: number\n    boltWidth: number\n    barWidth: number\n    barHeight: number\n    barExtension: number\n    boltExtension: number\n}\n\nexport function SpecDisplay({spec}: { spec: DaVinciSpec }): JSX.Element {\n    return (\n        <div className=\"top-middle\">\n            frequency={spec.frequency}&nbsp;\n            degrees={spec.degrees}&nbsp;\n            radius={spec.radius}&nbsp;\n            bar-area=({spec.barWidth}x{spec.barHeight})&nbsp;\n            bar-extend={spec.barExtension}&nbsp;\n            bolt-extend={spec.boltExtension}&nbsp;\n        </div>\n    )\n}\n\nexport function SpecEditor({spec, setSpec, saveCSV}: {\n    spec: DaVinciSpec,\n    setSpec: (spec: DaVinciSpec) => void,\n    saveCSV: () => void,\n}): JSX.Element {\n    const [frequency, setFrequency] = useState(spec.frequency.toString())\n    const [degrees, setDegrees] = useState(spec.degrees.toString())\n    const [radius, setRadius] = useState(spec.radius.toString())\n    const [boltWidth, setBoltWidth] = useState((spec.boltWidth * MILLIS).toString())\n    const [barWidth, setBarWidth] = useState((spec.barWidth * MILLIS).toString())\n    const [barHeight, setBarHeight] = useState((spec.barHeight * MILLIS).toString())\n    const [barExtension, setBarExtension] = useState((spec.barExtension * MILLIS).toString())\n    const [boltExtension, setBoltExtension] = useState((spec.boltExtension * MILLIS).toString())\n\n    function handleSubmit(): void {\n        const daVinciSpec: DaVinciSpec = {\n            frequency: parseInt(frequency, 10),\n            degrees: parseFloat(degrees),\n            radius: parseFloat(radius),\n            boltWidth: parseFloat(boltWidth) / MILLIS,\n            barWidth: parseFloat(barWidth) / MILLIS,\n            barHeight: parseFloat(barHeight) / MILLIS,\n            barExtension: parseFloat(barExtension) / MILLIS,\n            boltExtension: parseFloat(boltExtension) / MILLIS,\n        }\n        if (!(!isFrequencyValid(frequency) || isNaN(daVinciSpec.degrees) || isNaN(daVinciSpec.radius) ||\n            isNaN(daVinciSpec.boltWidth) || isNaN(daVinciSpec.barWidth) || isNaN(daVinciSpec.barHeight)\n            || isNaN(daVinciSpec.barExtension) || isNaN(daVinciSpec.boltExtension))) {\n            setSpec(daVinciSpec)\n        }\n    }\n\n    function isFrequencyValid(value: string): boolean {\n        const f = parseInt(value, 10)\n        if (isNaN(f)) {\n            return false\n        }\n        return f <= 10 && f > 0\n    }\n\n    return (\n        <Form onSubmit={event => {\n            event.preventDefault()\n            handleSubmit()\n        }} className=\"spec-editor\">\n            <h3 className=\"w-100 text-center\"><a target=\"_BLANK\" href=\"https://github.com/CivilSource/DavinciDome\">Da Vinci Dome</a></h3>\n            <hr/>\n            <FormGroup>\n                <Label for=\"frequency\">Frequency [1..10]</Label>\n                <Input id=\"frequency\"\n                       value={frequency}\n                       valid={isFrequencyValid(frequency)}\n                       invalid={!isFrequencyValid(frequency)}\n                       onChange={({target}) => setFrequency(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"degrees\">Rotation [deg]</Label>\n                <Input id=\"degrees\"\n                       value={degrees}\n                       valid={!isNaN(parseFloat(degrees))}\n                       invalid={isNaN(parseFloat(degrees))}\n                       onChange={({target}) => setDegrees(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"radius\">Radius [m]</Label>\n                <Input id=\"radius\"\n                       value={radius}\n                       valid={!isNaN(parseFloat(radius))}\n                       invalid={isNaN(parseFloat(radius))}\n                       onChange={({target}) => setRadius(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"boltWidth\">Bolt Diam [mm]</Label>\n                <Input id=\"boltWidth\"\n                       value={boltWidth}\n                       valid={!isNaN(parseFloat(boltWidth))}\n                       invalid={isNaN(parseFloat(boltWidth))}\n                       onChange={({target}) => setBoltWidth(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"barWidth\">Bar Width [mm]</Label>\n                <Input id=\"barWidth\"\n                       value={barWidth}\n                       valid={!isNaN(parseFloat(barWidth))}\n                       invalid={isNaN(parseFloat(barWidth))}\n                       onChange={({target}) => setBarWidth(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"barHeight\">Bar Height [mm]</Label>\n                <Input id=\"barHeight\"\n                       value={barHeight}\n                       valid={!isNaN(parseFloat(barHeight))}\n                       invalid={isNaN(parseFloat(barHeight))}\n                       onChange={({target}) => setBarHeight(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"boltExtension\">Bolt Extra [mm]</Label>\n                <Input id=\"boltExtension\"\n                       value={boltExtension}\n                       valid={!isNaN(parseFloat(boltExtension))}\n                       invalid={isNaN(parseFloat(boltExtension))}\n                       onChange={({target}) => setBoltExtension(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"barExtension\">Bar Extra [mm]</Label>\n                <Input id=\"barExtension\"\n                       value={barExtension}\n                       valid={!isNaN(parseFloat(barExtension))}\n                       invalid={isNaN(parseFloat(barExtension))}\n                       onChange={({target}) => setBarExtension(target.value)}/>\n            </FormGroup>\n            <hr/>\n            <Button color=\"success\" className=\"w-100 my-1\" type=\"submit\">Regenerate</Button>\n            <Button color=\"info\" className=\"w-100\" onClick={saveCSV}>Download</Button>\n        </Form>\n    )\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport FileSaver from \"file-saver\"\nimport JSZip from \"jszip\"\n\nimport {Joint} from \"./DaVinci\"\n\nexport interface DaVinciInterval {\n    nodeIndexes: number[]\n    type: string\n}\n\nexport interface DaVinciOutput {\n    joints: Joint[]\n    daVinciIntervals: DaVinciInterval[]\n}\n\nfunction extractNodeFile(output: DaVinciOutput): string {\n    const rows: string[][] = []\n    rows.push([\"index\", \"x\", \"y\", \"z\"])\n    output.joints.forEach((joint, index) => rows.push([\n        (index + 1).toFixed(0),\n        csvNumber(joint.point.x), csvNumber(joint.point.y), csvNumber(joint.point.z),\n    ]))\n    return rows.map(row => row.join(\";\")).join(\"\\n\")\n}\n\nfunction extractIntervalFile(output: DaVinciOutput): string {\n    const rows: string[][] = []\n    rows.push([\"joints\", \"type\"])\n    output.daVinciIntervals.forEach((interval, index) => {\n        const indexString = interval.nodeIndexes.map(i => i + 1).join(\",\")\n        rows.push([`\"=\"\"${indexString}\"\"\"`, interval.type])\n    })\n    return rows.map(row => row.join(\";\")).join(\"\\n\")\n}\n\nfunction csvNumber(n: number): string {\n    return n.toFixed(5).replace(/[.]/, \",\")\n}\n\nfunction dateString(): string {\n    return new Date().toISOString()\n        .replace(/[.].*/, \"\").replace(/[:T_]/g, \"-\")\n}\n\nexport function saveCSVZip(output: DaVinciOutput): void {\n    const zip = new JSZip()\n    zip.file(\"joints.csv\", extractNodeFile(output))\n    zip.file(\"intervals.csv\", extractIntervalFile(output))\n    zip.generateAsync({type: \"blob\", mimeType: \"application/zip\"}).then(blob => {\n        FileSaver.saveAs(blob, `davinci-${dateString()}.zip`)\n    })\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport * as React from \"react\"\nimport {Euler, Matrix4, Quaternion, Vector3} from \"three\"\n\nimport {Bar, Bolt} from \"./DaVinci\"\nimport {DaVinciSpec} from \"./DaVinciSpec\"\n\n\nexport function Ball({position, radius}: {\n    position: Vector3,\n    radius: number,\n}): JSX.Element {\n    return (\n        <mesh position={position}>\n            <sphereGeometry args={[radius, 32, 16]}/>\n            <meshPhongMaterial color=\"green\"/>\n        </mesh>\n    )\n}\n\nconst UP = new Vector3(0, 1, 0)\nconst DOWN = new Vector3(0, -1, 0)\n\nexport function BarBox({bar, renderSpec}: { bar: Bar, renderSpec: DaVinciSpec }): JSX.Element {\n    const length = bar.jointA.point.distanceTo(bar.jointD.point)\n    const unit = new Vector3().subVectors(bar.jointD.point, bar.jointA.point).normalize()\n    const midpoint = new Vector3().lerpVectors(bar.jointA.point, bar.jointD.point, 0.5)\n    const tangent = new Vector3().crossVectors(midpoint, unit).normalize()\n    const basis = new Matrix4()\n        .makeBasis(new Vector3().copy(midpoint).normalize(), unit, tangent)\n        .setPosition(midpoint)\n        .scale(new Vector3(renderSpec.barHeight, length + renderSpec.barExtension, renderSpec.barWidth))\n    return (\n        <mesh matrix={basis} matrixAutoUpdate={false}>\n            <boxBufferGeometry attach=\"geometry\"/>\n            <meshLambertMaterial attach=\"material\" color=\"white\"/>\n        </mesh>\n    )\n}\n\nexport function BoltCylinder({bolt, renderSpec}: { bolt: Bolt, renderSpec: DaVinciSpec }): JSX.Element {\n    const length = bolt.jointA.point.distanceTo(bolt.jointB.point)\n    const unit = new Vector3().subVectors(bolt.jointB.point, bolt.jointA.point).normalize()\n    const position = new Vector3().lerpVectors(bolt.jointA.point, bolt.jointB.point, 0.5)\n    const scale = new Vector3(renderSpec.boltWidth, length + renderSpec.boltExtension, renderSpec.boltWidth)\n    const dot = UP.dot(unit)\n    const rotation = new Euler().setFromQuaternion(new Quaternion().setFromUnitVectors(dot > 0 ? UP : DOWN, unit))\n    return (\n        <mesh scale={scale} rotation={rotation} position={position}>\n            <cylinderBufferGeometry attach=\"geometry\" args={[1, 1, 1]}/>\n            <meshLambertMaterial attach=\"material\" color=\"orange\"/>\n        </mesh>\n    )\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport {OrbitControls, PerspectiveCamera} from \"@react-three/drei\"\nimport {Canvas} from \"@react-three/fiber\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport * as React from \"react\"\nimport {useEffect, useState} from \"react\"\nimport {Button, Col, Container, Row} from \"reactstrap\"\n\nimport \"./App.css\"\nimport {daVinci, daVinciOutput, DaVinciResult, degreesToRadians} from \"./DaVinci\"\nimport {DaVinciSpec, SpecDisplay, SpecEditor} from \"./DaVinciSpec\"\nimport {saveCSVZip} from \"./Download\"\nimport {BarBox, BoltCylinder} from \"./Parts\"\nimport {Chirality, Scaffold} from \"./Scaffold\"\n\nconst INITIAL_RENDER_SPEC: DaVinciSpec = {\n    frequency: 2,\n    degrees: 30,\n    radius: 7,\n    boltWidth: 0.05,\n    barWidth: 0.3,\n    barHeight: 0.02,\n    barExtension: 0.3,\n    boltExtension: 0.2,\n}\nconst chiralityFromSpec = ({degrees}: DaVinciSpec) => degrees > 0 ? Chirality.Right : Chirality.Left\n\n\nfunction App(): JSX.Element {\n    const [size, setSize] = useState([window.innerWidth, window.innerHeight])\n    const [renderSpec, setRenderSpec] = useState(INITIAL_RENDER_SPEC)\n    const [daVinciResult, setDaVinciResult] = useState<DaVinciResult>(daVinci(\n        new Scaffold(renderSpec.frequency, renderSpec.radius, chiralityFromSpec(renderSpec)),\n        degreesToRadians(renderSpec.degrees),\n    ))\n    const [version, setVersion] = useState(0)\n    useEffect(() => {\n        const checkSize = () => setSize([window.innerWidth, window.innerHeight])\n        window.addEventListener(\"resize\", checkSize)\n        return () => window.removeEventListener(\"resize\", checkSize)\n    }, [])\n    useEffect(() => {\n        const {frequency, radius, degrees} = renderSpec\n        const radians = Math.abs(degreesToRadians(degrees))\n        setDaVinciResult(daVinci(new Scaffold(frequency, radius, chiralityFromSpec(renderSpec)), radians))\n        console.log(\"RENDER_SPEC\", renderSpec.radius)\n        setVersion(v => v + 1)\n    }, [renderSpec])\n    return (\n        <div className=\"App\" style={{width: size[0], height: size[1]}}>\n            <SpecEditor spec={renderSpec} setSpec={spec => setRenderSpec(spec)}\n                        saveCSV={() => saveCSVZip(daVinciOutput(daVinciResult))}/>\n            <Canvas className=\"canvas\">\n                <ambientLight intensity={0.05}/>\n                <mesh onDoubleClick={event => {\n                    const face = event.face\n                    if (!face) {\n                        return\n                    }\n                    const position = face.normal.multiplyScalar(event.camera.position.length())\n                    event.camera.position.copy(position)\n                }}>\n                    <boxGeometry args={[1, 1, 1]}/>\n                    <meshStandardMaterial transparent={true} opacity={0.8} color=\"orange\"/>\n                </mesh>\n                {daVinciResult.bars.map((bar, index) => (\n                    <BarBox key={`bar-${version}-#${index}`} bar={bar} renderSpec={renderSpec}/>\n                ))}\n                {daVinciResult.bolts.map((bolt, index) => (\n                    <BoltCylinder key={`bolt-${version}-#${index}`} bolt={bolt} renderSpec={renderSpec}/>\n                ))}\n                <PerspectiveCamera makeDefault={true} position={[renderSpec.radius * 3, 0, 0]}>\n                    <pointLight position={[0, 10 * renderSpec.radius, 0]} color=\"white\"/>\n                </PerspectiveCamera>\n                <OrbitControls/>\n            </Canvas>\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}