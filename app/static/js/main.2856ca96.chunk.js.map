{"version":3,"sources":["Scaffold.ts","DaVinci.ts","DaVinciSpec.tsx","Download.ts","Parts.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["adjacent","v0","v1","push","Chirality","Scaffold","constructor","frequency","radius","chirality","vertices","VERTEX","forEach","location","this","vertexAt","EDGE","edge","midVertices","map","midEdge","vertexBetween","FACE_EDGES","faceEdge","side0","side1","side2","buildFaces","buildEdgeVertices","vertex","outward","Vector3","copy","normalize","first","pop","Error","sorted","vectorTo","subVectors","length","top","next","find","v","toAdjacent","toTop","dot","dotProduct","crossVectors","Left","Right","filter","adj","index","sortVertex","edgeVertices","edgeVertexIndex","verticesOfEdge","previousVertex","walk","loc0","loc1","spot","lerpVectors","faceVertexArrays","FACE_VERTICES","faceVertexIndex","faceIndex","faceVertex","which","origin","walkA","vectorA","sub","walkB","v2","vectorB","add","row","rowMember","vert","sideVertices","antiWalk","walkSide","faceEdges","vsVertex","PENTAGON_VERTICES","vertexArray","current","edgeVertexA","front","edgeVertexB","lerp","multiplyScalar","ONE","PHI","JointPosition","barName","vertexA","vertexB","min","Math","max","daVinci","scaffold","angle","rotate","twist","joints","rotationAngle","atan","rotationAxis","freshJoint","point","node","position","Above","bars","dictionary","adjacentVertex","bar","applyAxisAngle","hubs","adjacentBars","intersect","planeBar","lineBar","extendBar","normal","plane","Plane","findIndex","extend","start","end","nextLine","Line3","intersectionPoint","intersectLine","distanceTo","axis","bolts","hub","currentBar","nextIndex","nextBar","bolt","jointA","jointB","daVinciToDome","result","surfaceHeight","joint","distance","distanceToPoint","Below","line","planeJoint","OnSurface","withPlaneJoint","b","degreesToRadians","degree","PI","MILLIS","SpecEditor","spec","setSpec","saveCSV","setFrequency","useState","toString","degrees","setDegrees","setRadius","boltWidth","setBoltWidth","barWidth","setBarWidth","barHeight","setBarHeight","barExtension","setBarExtension","boltExtension","setBoltExtension","planeHeight","setPlaneHeight","isFrequencyValid","value","f","parseInt","isNaN","isDegreesValid","onSubmit","event","preventDefault","daVinciSpec","parseFloat","handleSubmit","className","target","href","for","id","valid","invalid","onChange","color","type","onClick","csvNumber","n","toFixed","replace","saveCSVZip","output","zip","JSZip","file","onSurfaceJoints","extractSupportFile","rows","x","z","y","join","extractNodeFile","daVinciIntervals","interval","indexString","nodeIndexes","i","extractIntervalFile","generateAsync","mimeType","then","blob","FileSaver","saveAs","Date","toISOString","Ball","args","UP","DOWN","BarBox","renderSpec","unit","midpoint","tangent","basis","Matrix4","makeBasis","setPosition","scale","matrix","matrixAutoUpdate","attach","BoltCylinder","rotation","Euler","setFromQuaternion","Quaternion","setFromUnitVectors","INITIAL_RENDER_SPEC","chiralityFromSpec","App","size","setSize","window","innerWidth","innerHeight","setRenderSpec","daVinciResult","setDaVinciResult","version","setVersion","useEffect","checkSize","addEventListener","removeEventListener","radians","abs","circleRadius","sqrt","j","reduce","r","style","width","height","daVinciOutput","intensity","onDoubleClick","face","camera","transparent","opacity","side","PerspectiveCamera","makeDefault","OrbitControls","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2856ca96.chunk.js","sourcesContent":["/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport {Vector3} from \"three\"\n\nexport interface Vertex {\n    index: number,\n    location: Vector3\n    adjacent: Vertex[]\n}\n\nfunction adjacent(v0: Vertex, v1: Vertex): void {\n    v0.adjacent.push(v1)\n    v1.adjacent.push(v0)\n}\n\nexport enum Chirality {\n    Left, Right,\n}\n\nexport class Scaffold {\n    public readonly vertices: Vertex[] = []\n\n    constructor(public readonly frequency: number, public readonly radius: number, public readonly chirality: Chirality) {\n        VERTEX.forEach(location => this.vertexAt(location))\n        if (frequency === 1) {\n            EDGE.forEach(edge => {\n                const v0 = this.vertices[edge[0]]\n                const v1 = this.vertices[edge[1]]\n                adjacent(v0, v1)\n            })\n        } else if (frequency === 2) {\n            const midVertices = EDGE.map(edge => {\n                const v0 = this.vertices[edge[0]]\n                const v1 = this.vertices[edge[1]]\n                const midEdge = this.vertexBetween(v0, v1)\n                adjacent(v0, midEdge)\n                adjacent(midEdge, v1)\n                return midEdge\n            })\n            FACE_EDGES.forEach(faceEdge => {\n                const side0 = midVertices[faceEdge[0]]\n                const side1 = midVertices[faceEdge[1]]\n                const side2 = midVertices[faceEdge[2]]\n                adjacent(side0, side1)\n                adjacent(side1, side2)\n                adjacent(side2, side0)\n            })\n        } else {\n            this.buildFaces(this.buildEdgeVertices())\n        }\n        this.vertices.forEach(vertex => sortVertex(vertex, chirality))\n    }\n\n    private buildEdgeVertices(): Vertex[][] {\n        const edgeVertices: Vertex[][] = []\n        EDGE.forEach(edgeVertexIndex => {\n            const verticesOfEdge: Vertex[] = []\n            edgeVertices.push(verticesOfEdge)\n            let vertex: Vertex | undefined\n            let previousVertex: Vertex | undefined\n            for (let walk = 0; walk < this.frequency - 1; walk++) {\n                previousVertex = vertex\n                const v0 = this.vertices[edgeVertexIndex[0]]\n                const v1 = this.vertices[edgeVertexIndex[1]]\n                const loc0 = v0.location\n                const loc1 = v1.location\n                const spot = new Vector3().lerpVectors(loc0, loc1, (walk + 1) / this.frequency)\n                vertex = this.vertexAt(spot)\n                verticesOfEdge.push(vertex)\n                if (previousVertex) {\n                    adjacent(vertex, previousVertex)\n                    if (walk === this.frequency - 2) {\n                        adjacent(vertex, v1)\n                    }\n                } else {\n                    adjacent(vertex, v0)\n                }\n            }\n        })\n        return edgeVertices\n    }\n\n    private buildFaces(edgeVertices: Vertex[][]): void {\n        const faceVertexArrays: Vertex[][] = []\n        FACE_VERTICES.forEach((faceVertexIndex, faceIndex) => {\n            const faceVertex = (which: number) => this.vertices[faceVertexIndex[which]]\n            const v0 = faceVertex(0)\n            const origin = v0.location\n            // interpolate along the edges of the face creating arrays of vertices on the way\n            for (let walkA = 1; walkA < this.frequency - 1; walkA++) {\n                const v1 = faceVertex(1)\n                const vectorA = new Vector3().lerpVectors(origin, v1.location, walkA / this.frequency)\n                vectorA.sub(origin)\n                faceVertexArrays[walkA - 1] = []\n                for (let walkB = 1; walkB < this.frequency - walkA; walkB++) {\n                    const v2 = faceVertex(2)\n                    const vectorB = new Vector3().lerpVectors(origin, v2.location, walkB / this.frequency)\n                    vectorB.sub(origin)\n                    const spot = new Vector3().copy(origin)\n                    spot.add(vectorA)\n                    spot.add(vectorB)\n                    faceVertexArrays[walkA - 1].push(this.vertexAt(spot))\n                }\n            }\n            // define the adjacency among face vertices\n            for (let row = 0; row < faceVertexArrays.length; row++) {\n                for (let rowMember = 0; rowMember < faceVertexArrays[row].length; rowMember++) {\n                    if (rowMember < faceVertexArrays[row].length - 1) {\n                        adjacent(faceVertexArrays[row][rowMember], faceVertexArrays[row][rowMember + 1])\n                    }\n                    if (row > 0) {\n                        const vert = faceVertexArrays[row][rowMember]\n                        adjacent(vert, faceVertexArrays[row - 1][rowMember])\n                        adjacent(vert, faceVertexArrays[row - 1][rowMember + 1])\n                    }\n                }\n            }\n            // compile side vertices (of a triangle!) reversing traversal when necessary\n            const sideVertices: Vertex[] [] = [[], [], []]\n            for (let walk = 0; walk < this.frequency - 2; walk++) {\n                const antiWalk = faceVertexArrays.length - walk - 1\n                sideVertices[0].push(faceVertexArrays[walk][0])\n                sideVertices[1].push(faceVertexArrays[antiWalk][faceVertexArrays[antiWalk].length - 1])\n                sideVertices[2].push(faceVertexArrays[0][walk])\n            }\n            // define adjacency between face vertices and edge vertices\n            for (let walkSide = 0; walkSide < sideVertices.length; walkSide++) {\n                const faceEdges = FACE_EDGES[faceIndex]\n                const edge = edgeVertices[faceEdges[walkSide]]\n                for (let walk = 0; walk < faceVertexArrays.length; walk++) {\n                    const vsVertex = sideVertices[walkSide][walk]\n                    adjacent(vsVertex, edge[walk])\n                    adjacent(vsVertex, edge[walk + 1])\n                }\n            }\n        })\n        PENTAGON_VERTICES.forEach(vertexArray => {\n            // define the adjacency for this pentagon\n            for (let current = 0; current < vertexArray.length; current++) {\n                const next = (current + 1) % vertexArray.length\n                const edgeVertexA = vertexArray[current].front ? 0 : this.frequency - 2\n                const edgeVertexB = vertexArray[next].front ? 0 : this.frequency - 2\n                const vertexA = edgeVertices[vertexArray[current].edge][edgeVertexA]\n                const vertexB = edgeVertices[vertexArray[next].edge][edgeVertexB]\n                adjacent(vertexA, vertexB)\n            }\n        })\n    }\n\n    private vertexBetween(v0: Vertex, v1: Vertex): Vertex {\n        const location = new Vector3().copy(v0.location).lerp(v1.location, 0.5)\n        return this.vertexAt(location)\n    }\n\n    private vertexAt(location: Vector3): Vertex {\n        const length = location.length()\n        location.multiplyScalar(this.radius / length)\n        const index = this.vertices.length\n        const vertex = {index, location, adjacent: []}\n        this.vertices.push(vertex)\n        return vertex\n    }\n}\n\nconst NUL = 0.0\nconst ONE = 0.5257311121191336\nconst PHI = 0.8506508083520400\n\nconst VERTEX: Vector3[] = [\n    new Vector3(+ONE, NUL, +PHI), new Vector3(+ONE, NUL, -PHI),\n    new Vector3(+PHI, +ONE, NUL), new Vector3(-PHI, +ONE, NUL),\n    new Vector3(NUL, +PHI, +ONE), new Vector3(NUL, -PHI, +ONE),\n    new Vector3(-ONE, NUL, -PHI), new Vector3(-ONE, NUL, +PHI),\n    new Vector3(-PHI, -ONE, NUL), new Vector3(+PHI, -ONE, NUL),\n    new Vector3(NUL, -PHI, -ONE), new Vector3(NUL, +PHI, -ONE),\n]\n\nconst EDGE = [\n    [0, 2], [0, 4], [0, 5], [0, 7], [0, 9],\n    [1, 10], [1, 11], [1, 2], [1, 6], [1, 9],\n    [2, 11], [2, 4], [2, 9], [3, 11], [3, 4],\n    [3, 6], [3, 7], [3, 8], [4, 11], [4, 7],\n    [5, 10], [5, 7], [5, 8], [5, 9], [6, 10],\n    [6, 11], [6, 8], [7, 8], [8, 10], [9, 10],\n]\n\nconst FACE_VERTICES = [\n    [0, 2, 4], [0, 2, 9], [0, 4, 7], [0, 5, 7], [0, 5, 9],\n    [1, 2, 11], [1, 2, 9], [1, 6, 10], [1, 6, 11], [1, 9, 10],\n    [2, 4, 11], [3, 4, 11], [3, 4, 7], [3, 6, 11], [3, 6, 8],\n    [3, 7, 8], [5, 7, 8], [5, 8, 10], [5, 9, 10], [6, 8, 10],\n]\n\nconst FACE_EDGES = [\n    [0, 11, 1], [0, 12, 4], [1, 19, 3], [2, 21, 3], [2, 23, 4],\n    [7, 10, 6], [7, 12, 9], [8, 24, 5], [8, 25, 6], [9, 29, 5],\n    [11, 18, 10], [14, 18, 13], [14, 19, 16], [15, 25, 13], [15, 26, 17],\n    [16, 27, 17], [21, 27, 22], [22, 28, 20], [23, 29, 20], [26, 28, 24],\n]\n\ninterface PentagonVertex {\n    edge: number\n    front: boolean\n}\n\nconst PENTAGON_VERTICES: PentagonVertex[][] = [\n    [{edge: 0, front: true}, {edge: 1, front: true},\n        {edge: 3, front: true}, {edge: 2, front: true}, {edge: 4, front: true}],\n    [{edge: 7, front: true}, {edge: 6, front: true},\n        {edge: 8, front: true}, {edge: 5, front: true}, {edge: 9, front: true}],\n    [{edge: 10, front: true}, {edge: 11, front: true},\n        {edge: 0, front: false}, {edge: 12, front: true}, {edge: 7, front: false}],\n    [{edge: 14, front: true}, {edge: 13, front: true},\n        {edge: 15, front: true}, {edge: 17, front: true}, {edge: 16, front: true}],\n    [{edge: 18, front: true}, {edge: 11, front: false},\n        {edge: 1, front: false}, {edge: 19, front: true}, {edge: 14, front: false}],\n    [{edge: 21, front: true}, {edge: 22, front: true},\n        {edge: 20, front: true}, {edge: 23, front: true}, {edge: 2, front: false}],\n    [{edge: 26, front: true}, {edge: 24, front: true},\n        {edge: 8, front: false}, {edge: 25, front: true}, {edge: 15, front: false}],\n    [{edge: 27, front: true}, {edge: 16, front: false},\n        {edge: 19, front: false}, {edge: 3, front: false}, {edge: 21, front: false}],\n    [{edge: 28, front: true}, {edge: 22, front: false},\n        {edge: 27, front: false}, {edge: 17, front: false}, {edge: 26, front: false}],\n    [{edge: 4, front: false}, {edge: 23, front: false},\n        {edge: 29, front: true}, {edge: 9, front: false}, {edge: 12, front: false}],\n    [{edge: 28, front: false}, {edge: 20, front: false},\n        {edge: 29, front: false}, {edge: 5, front: false}, {edge: 24, front: false}],\n    [{edge: 6, front: false}, {edge: 10, front: false},\n        {edge: 18, front: false}, {edge: 13, front: false}, {edge: 25, front: false}],\n]\n\n// sort the adjacent vertices of a vertex in a clockwise way\nfunction sortVertex(vertex: Vertex, chirality: Chirality): void {\n    const outward = new Vector3().copy(vertex.location).normalize()\n    const first = vertex.adjacent.pop()\n    if (!first) {\n        throw new Error(\"No first to pop!\")\n    }\n    const sorted: Vertex[] = [first]\n    const vectorTo = ({location}: Vertex) => new Vector3().subVectors(location, vertex.location).normalize()\n    while (vertex.adjacent.length > 0) {\n        const top: Vertex = sorted[sorted.length - 1]\n        const next = vertex.adjacent.find(v => {\n            const toAdjacent = vectorTo(v)\n            const toTop = vectorTo(top)\n            if (toAdjacent.dot(toTop) < 0.25) {\n                return false\n            }\n            const dotProduct = new Vector3().crossVectors(toTop, toAdjacent).dot(outward)\n            switch (chirality) {\n                case Chirality.Left:\n                    return dotProduct > 0\n                case Chirality.Right:\n                    return dotProduct < 0\n                default:\n                    throw new Error(\"Unknown chirality\")\n            }\n        })\n        if (!next) {\n            throw new Error(\"No next found\")\n        }\n        sorted.push(next)\n        vertex.adjacent = vertex.adjacent.filter(adj => adj.index !== next.index)\n    }\n    vertex.adjacent = sorted\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport {Line3, Plane, Vector3} from \"three\"\n\nimport {DaVinciInterval, DaVinciOutput} from \"./Download\"\nimport {Chirality, Scaffold, Vertex} from \"./Scaffold\"\n\nexport enum JointPosition {\n    Above, Below, OnSurface,\n}\n\nexport interface Joint {\n    index: number\n    point: Vector3\n    position: JointPosition\n}\n\nexport interface Bar {\n    index: number\n    joints: Joint[]\n    vertexA: Vertex\n    vertexB: Vertex\n}\n\nexport interface Bolt {\n    index: number\n    jointA: Joint\n    jointB: Joint\n}\n\nexport interface DaVinciResult {\n    bars: Bar[]\n    bolts: Bolt[]\n    joints: Joint[]\n}\n\nexport interface Hub {\n    adjacentBars: Bar[]\n}\n\nfunction barName(vertexA: Vertex, vertexB: Vertex): string {\n    const min = Math.min(vertexA.index, vertexB.index)\n    const max = Math.max(vertexA.index, vertexB.index)\n    return `${min},${max}`\n}\n\nexport function daVinci(scaffold: Scaffold, angle: number, rotate: boolean): DaVinciResult {\n    const twist = angle * (scaffold.chirality === Chirality.Left ? 1 : -1)\n    const joints: Joint[] = []\n    const rotationAngle = rotate ? Math.atan(1 / 1.61803398875) : 0\n    const rotationAxis = new Vector3(1, 0, 0)\n\n    function freshJoint(point: Vector3): Joint {\n        const index = joints.length\n        const node: Joint = {index, point, position: JointPosition.Above}\n        joints.push(node)\n        return node\n    }\n\n    const bars: Bar[] = []\n    const dictionary: Record<string, Bar> = {}\n    scaffold.vertices.forEach(vertex => {\n        vertex.adjacent.forEach(adjacentVertex => {\n            if (adjacentVertex.index > vertex.index) {\n                return\n            }\n            const index = bars.length\n            const barJoints: Joint[] = [\n                freshJoint(new Vector3().copy(vertex.location).applyAxisAngle(rotationAxis, rotationAngle)),\n                freshJoint(new Vector3()),\n                freshJoint(new Vector3()),\n                freshJoint(new Vector3().copy(adjacentVertex.location).applyAxisAngle(rotationAxis, rotationAngle)),\n            ]\n            const vertexA = vertex\n            const vertexB = adjacentVertex\n            const bar: Bar = {index, joints: barJoints, vertexA, vertexB}\n            bars.push(bar)\n            dictionary[barName(bar.vertexA, bar.vertexB)] = bar\n        })\n    })\n    const hubs = scaffold.vertices.map(vertex => {\n        const adjacentBars = vertex.adjacent.map(adjacentVertex => dictionary[barName(vertex, adjacentVertex)])\n        const hub: Hub = {adjacentBars}\n        return hub\n    })\n    bars.forEach(bar => {\n        const axis = new Vector3().lerpVectors(bar.joints[0].point, bar.joints[3].point, 0.5).normalize()\n        bar.joints[0].point.applyAxisAngle(axis, twist)\n        bar.joints[3].point.applyAxisAngle(axis, twist)\n    })\n\n    function intersect(planeBar: Bar, lineBar: Bar, extendBar: boolean): Joint {\n        const normal = new Vector3().crossVectors(planeBar.joints[0].point, planeBar.joints[3].point).normalize()\n        const plane = new Plane(normal)\n        const hubA = hubs[planeBar.vertexA.index]\n        const adjacentIndex = hubA.adjacentBars.findIndex(adj => adj.index === planeBar.index)\n        if (adjacentIndex < 0) {\n            throw new Error(\"adjacent not found\")\n        }\n        const extend = (start: Vector3, end: Vector3) =>\n            new Vector3().copy(end).add(new Vector3().subVectors(end, start))\n        const nextLine = new Line3(\n            extend(lineBar.joints[0].point, lineBar.joints[3].point),\n            extend(lineBar.joints[3].point, lineBar.joints[0].point),\n        )\n        const intersectionPoint = new Vector3()\n        plane.intersectLine(nextLine, intersectionPoint)\n        const distA = intersectionPoint.distanceTo(lineBar.joints[0].point)\n        const distB = intersectionPoint.distanceTo(lineBar.joints[3].point)\n        const forward = distA < distB\n        if (forward) {\n            if (extendBar) {\n                lineBar.joints[0].point.copy(intersectionPoint)\n                return lineBar.joints[0]\n            } else {\n                lineBar.joints[1].point.copy(intersectionPoint)\n                return lineBar.joints[1]\n            }\n        } else {\n            if (extendBar) {\n                lineBar.joints[3].point.copy(intersectionPoint)\n                return lineBar.joints[3]\n            } else {\n                lineBar.joints[2].point.copy(intersectionPoint)\n                return lineBar.joints[2]\n            }\n        }\n    }\n\n    const bolts: Bolt [] = []\n    hubs.forEach(hub => {\n        hub.adjacentBars.forEach((currentBar, index) => {\n            const nextIndex = (index + 1) % hub.adjacentBars.length\n            const nextBar = hub.adjacentBars[nextIndex]\n            const nodeA = intersect(currentBar, nextBar, true)\n            const nodeB = intersect(nextBar, currentBar, false)\n            const bolt: Bolt = {jointA: nodeA, jointB: nodeB, index: bars.length + bolts.length}\n            bolts.push(bolt)\n        })\n    })\n    return {bars, bolts, joints}\n}\n\nexport function daVinciToDome(result: DaVinciResult, surfaceHeight: number): DaVinciResult {\n    const bolts = [...result.bolts]\n    const plane = new Plane(new Vector3(0, -1, 0), surfaceHeight)\n    result.joints.forEach(joint => {\n        const distance = plane.distanceToPoint(joint.point)\n        joint.position = distance <= 0 ? JointPosition.Above : JointPosition.Below\n    })\n    const bars = result.bars.map(bar => {\n        const line = new Line3(bar.joints[0].point, bar.joints[3].point)\n        const point = plane.intersectLine(line, new Vector3())\n        if (point) {\n            const planeJoint: Joint = {point, index: result.joints.length, position: JointPosition.OnSurface}\n            result.joints.push(planeJoint)\n            const withPlaneJoint = (bar.joints[0].position === JointPosition.Below) ? [planeJoint, ...bar.joints] : [...bar.joints, planeJoint]\n            return {...bar, joints: withPlaneJoint.filter(b => b.position !== JointPosition.Below)}\n        } else {\n            return bar\n        }\n    })\n    const joints = result.joints.filter(joint => joint.position !== JointPosition.Below)\n    joints.forEach((joint, index) => joint.index = index)\n    return {bars, bolts, joints}\n}\n\nexport function radiansToDegrees(radian: number): number {\n    return 180 / (radian * Math.PI)\n}\n\nexport function degreesToRadians(degree: number): number {\n    return Math.PI * degree / 180\n}\n\nexport function daVinciOutput({bars, bolts, joints}: DaVinciResult): DaVinciOutput {\n    const daVinciIntervals: DaVinciInterval [] = []\n    bars\n        .filter(bar => bar.joints[0].position === JointPosition.Above || bar.joints[bar.joints.length - 1].position === JointPosition.Above)\n        .forEach((bar) => {\n            daVinciIntervals.push({\n                nodeIndexes: bar.joints.map(j => j.index),\n                type: \"type 1\",\n            })\n        })\n    bolts\n        .filter(bolt => bolt.jointA.position === JointPosition.Above && bolt.jointB.position === JointPosition.Above)\n        .forEach((bolt) => {\n            daVinciIntervals.push({\n                nodeIndexes: [bolt.jointA.index, bolt.jointB.index],\n                type: \"type 2\",\n            })\n        })\n    return {joints, daVinciIntervals}\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport * as React from \"react\"\nimport {useState} from \"react\"\nimport {Button, Form, FormGroup, Input, Label} from \"reactstrap\"\n\nconst MILLIS = 1000\n\nexport interface DaVinciSpec {\n    frequency: number\n    degrees: number\n    radius: number\n    boltWidth: number\n    barWidth: number\n    barHeight: number\n    barExtension: number\n    boltExtension: number\n    planeHeight: number\n}\n\nexport function SpecEditor({spec, setSpec, saveCSV}: {\n    spec: DaVinciSpec,\n    setSpec: (spec: DaVinciSpec) => void,\n    saveCSV: () => void,\n}): JSX.Element {\n    const [frequency, setFrequency] = useState(spec.frequency.toString())\n    const [degrees, setDegrees] = useState(spec.degrees.toString())\n    const [radius, setRadius] = useState(spec.radius.toString())\n    const [boltWidth, setBoltWidth] = useState((spec.boltWidth * MILLIS).toString())\n    const [barWidth, setBarWidth] = useState((spec.barWidth * MILLIS).toString())\n    const [barHeight, setBarHeight] = useState((spec.barHeight * MILLIS).toString())\n    const [barExtension, setBarExtension] = useState((spec.barExtension * MILLIS).toString())\n    const [boltExtension, setBoltExtension] = useState((spec.boltExtension * MILLIS).toString())\n    const [planeHeight, setPlaneHeight] = useState((spec.planeHeight).toString())\n\n    function handleSubmit(): void {\n        const daVinciSpec: DaVinciSpec = {\n            frequency: parseInt(frequency, 10),\n            degrees: parseFloat(degrees),\n            radius: parseFloat(radius),\n            boltWidth: parseFloat(boltWidth) / MILLIS,\n            barWidth: parseFloat(barWidth) / MILLIS,\n            barHeight: parseFloat(barHeight) / MILLIS,\n            barExtension: parseFloat(barExtension) / MILLIS,\n            boltExtension: parseFloat(boltExtension) / MILLIS,\n            planeHeight: parseFloat(planeHeight),\n        }\n        if (!(!isFrequencyValid(frequency) || !isDegreesValid(degrees) || isNaN(daVinciSpec.radius) ||\n            isNaN(daVinciSpec.boltWidth) || isNaN(daVinciSpec.barWidth) || isNaN(daVinciSpec.barHeight)\n            || isNaN(daVinciSpec.barExtension) || isNaN(daVinciSpec.boltExtension) || isNaN(daVinciSpec.planeHeight))) {\n            setSpec(daVinciSpec)\n        }\n    }\n\n    function isFrequencyValid(value: string): boolean {\n        const f = parseInt(value, 10)\n        if (isNaN(f)) {\n            return false\n        }\n        return f <= 10 && f > 0\n    }\n\n    function isDegreesValid(value: string): boolean {\n        const f = parseInt(value, 10)\n        if (isNaN(f)) {\n            return false\n        }\n        return f <= 90 && f >= -90\n    }\n\n    return (\n        <Form onSubmit={event => {\n            event.preventDefault()\n            handleSubmit()\n        }} className=\"spec-editor\">\n            <h3 className=\"w-100 text-center\"><a target=\"_BLANK\" href=\"https://github.com/CivilSource/DavinciDome\">Da\n                Vinci Dome</a></h3>\n            <hr/>\n            <FormGroup>\n                <Label for=\"frequency\">Frequency [1..10]</Label>\n                <Input id=\"frequency\"\n                       value={frequency}\n                       valid={isFrequencyValid(frequency)}\n                       invalid={!isFrequencyValid(frequency)}\n                       onChange={({target}) => setFrequency(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"degrees\">Rotation [deg]</Label>\n                <Input id=\"degrees\"\n                       value={degrees}\n                       valid={isDegreesValid(degrees)}\n                       invalid={!isDegreesValid(degrees)}\n                       onChange={({target}) => setDegrees(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"radius\">Radius [m]</Label>\n                <Input id=\"radius\"\n                       value={radius}\n                       valid={!isNaN(parseFloat(radius))}\n                       invalid={isNaN(parseFloat(radius))}\n                       onChange={({target}) => setRadius(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"boltWidth\">Bolt Diam [mm]</Label>\n                <Input id=\"boltWidth\"\n                       value={boltWidth}\n                       valid={!isNaN(parseFloat(boltWidth))}\n                       invalid={isNaN(parseFloat(boltWidth))}\n                       onChange={({target}) => setBoltWidth(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"barWidth\">Bar Width [mm]</Label>\n                <Input id=\"barWidth\"\n                       value={barWidth}\n                       valid={!isNaN(parseFloat(barWidth))}\n                       invalid={isNaN(parseFloat(barWidth))}\n                       onChange={({target}) => setBarWidth(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"barHeight\">Bar Height [mm]</Label>\n                <Input id=\"barHeight\"\n                       value={barHeight}\n                       valid={!isNaN(parseFloat(barHeight))}\n                       invalid={isNaN(parseFloat(barHeight))}\n                       onChange={({target}) => setBarHeight(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"boltExtension\">Bolt Extra [mm]</Label>\n                <Input id=\"boltExtension\"\n                       value={boltExtension}\n                       valid={!isNaN(parseFloat(boltExtension))}\n                       invalid={isNaN(parseFloat(boltExtension))}\n                       onChange={({target}) => setBoltExtension(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"barExtension\">Bar Extra [mm]</Label>\n                <Input id=\"barExtension\"\n                       value={barExtension}\n                       valid={!isNaN(parseFloat(barExtension))}\n                       invalid={isNaN(parseFloat(barExtension))}\n                       onChange={({target}) => setBarExtension(target.value)}/>\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"planeHeight\">Plane Height [m]</Label>\n                <Input id=\"planeHeight\"\n                       value={planeHeight}\n                       valid={!isNaN(parseFloat(planeHeight))}\n                       invalid={isNaN(parseFloat(planeHeight))}\n                       onChange={({target}) => setPlaneHeight(target.value)}/>\n            </FormGroup>\n            <hr/>\n            <Button color=\"success\" className=\"w-100 my-1\" type=\"submit\">Regenerate</Button>\n            <Button color=\"info\" className=\"w-100\" onClick={saveCSV}>Download</Button>\n        </Form>\n    )\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport FileSaver from \"file-saver\"\nimport JSZip from \"jszip\"\n\nimport {Joint, JointPosition} from \"./DaVinci\"\n\nexport interface DaVinciInterval {\n    nodeIndexes: number[]\n    type: string\n}\n\nexport interface DaVinciOutput {\n    joints: Joint[]\n    daVinciIntervals: DaVinciInterval[]\n}\n\nfunction extractNodeFile(output: DaVinciOutput): string {\n    const rows: string[][] = []\n    rows.push([\"index\", \"x\", \"y\", \"z\"])\n    output.joints\n        .forEach((joint, index) => rows.push([\n            (index + 1).toFixed(0),\n            csvNumber(joint.point.x), csvNumber(joint.point.z), csvNumber(joint.point.y),\n        ]))\n    return rows.map(row => row.join(\";\")).join(\"\\n\")\n}\n\nfunction extractSupportFile(output: DaVinciOutput): string {\n    const onSurfaceJoints = output.joints.filter(joint => joint.position === JointPosition.OnSurface)\n    return `\"joints\"\\n\"=\"\"${onSurfaceJoints.map(joint => joint.index + 1)}\"\"\"`\n}\n\nfunction extractIntervalFile(output: DaVinciOutput): string {\n    const rows: string[][] = []\n    rows.push([\"joints\", \"type\"])\n    output.daVinciIntervals.forEach((interval, index) => {\n        const indexString = interval.nodeIndexes.map(i => i + 1).join(\",\")\n        rows.push([`\"=\"\"${indexString}\"\"\"`, interval.type])\n    })\n    return rows.map(row => row.join(\";\")).join(\"\\n\")\n}\n\nfunction csvNumber(n: number): string {\n    return n.toFixed(5).replace(/[.]/, \",\")\n}\n\nfunction dateString(): string {\n    return new Date().toISOString()\n        .replace(/[.].*/, \"\").replace(/[:T_]/g, \"-\")\n}\n\nexport function saveCSVZip(output: DaVinciOutput): void {\n    const zip = new JSZip()\n    zip.file(\"support.csv\", extractSupportFile(output))\n    zip.file(\"nodes.csv\", extractNodeFile(output))\n    zip.file(\"intervals.csv\", extractIntervalFile(output))\n    zip.generateAsync({type: \"blob\", mimeType: \"application/zip\"}).then(blob => {\n        FileSaver.saveAs(blob, `davinci-${dateString()}.zip`)\n    })\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport * as React from \"react\"\nimport {Euler, Matrix4, Quaternion, Vector3} from \"three\"\n\nimport {Bar, Bolt} from \"./DaVinci\"\nimport {DaVinciSpec} from \"./DaVinciSpec\"\n\n\nexport function Ball({position, radius}: {\n    position: Vector3,\n    radius: number,\n}): JSX.Element {\n    return (\n        <mesh position={position}>\n            <sphereGeometry args={[radius, 32, 16]}/>\n            <meshPhongMaterial color=\"red\"/>\n        </mesh>\n    )\n}\n\nconst UP = new Vector3(0, 1, 0)\nconst DOWN = new Vector3(0, -1, 0)\n\nexport function BarBox({bar, renderSpec}: { bar: Bar, renderSpec: DaVinciSpec }): JSX.Element {\n    const jointA = bar.joints[0]\n    const jointB = bar.joints[bar.joints.length -1]\n    const length = jointA.point.distanceTo(jointB.point)\n    const unit = new Vector3().subVectors(jointB.point, jointA.point).normalize()\n    const midpoint = new Vector3().lerpVectors(jointA.point, jointB.point, 0.5)\n    const tangent = new Vector3().crossVectors(midpoint, unit).normalize()\n    const basis = new Matrix4()\n        .makeBasis(new Vector3().copy(midpoint).normalize(), unit, tangent)\n        .setPosition(midpoint)\n        .scale(new Vector3(renderSpec.barHeight, length + renderSpec.barExtension, renderSpec.barWidth))\n    return (\n        <mesh matrix={basis} matrixAutoUpdate={false}>\n            <boxBufferGeometry attach=\"geometry\"/>\n            <meshLambertMaterial attach=\"material\" color=\"white\"/>\n        </mesh>\n    )\n}\n\nexport function BoltCylinder({bolt, renderSpec}: { bolt: Bolt, renderSpec: DaVinciSpec }): JSX.Element {\n    const length = bolt.jointA.point.distanceTo(bolt.jointB.point)\n    const unit = new Vector3().subVectors(bolt.jointB.point, bolt.jointA.point).normalize()\n    const position = new Vector3().lerpVectors(bolt.jointA.point, bolt.jointB.point, 0.5)\n    const scale = new Vector3(renderSpec.boltWidth, length + renderSpec.boltExtension, renderSpec.boltWidth)\n    const dot = UP.dot(unit)\n    const rotation = new Euler().setFromQuaternion(new Quaternion().setFromUnitVectors(dot > 0 ? UP : DOWN, unit))\n    return (\n        <mesh scale={scale} rotation={rotation} position={position}>\n            <cylinderBufferGeometry attach=\"geometry\" args={[1, 1, 1]}/>\n            <meshLambertMaterial attach=\"material\" color=\"orange\"/>\n        </mesh>\n    )\n}\n","/*\n * Copyright (c) 2021. BURO Civiel, Rotterdam, Netherlands\n * Licensed under GNU GENERAL PUBLIC LICENSE Version 3.\n */\n\nimport {OrbitControls, PerspectiveCamera} from \"@react-three/drei\"\nimport {Canvas} from \"@react-three/fiber\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport * as React from \"react\"\nimport {useEffect, useState} from \"react\"\nimport {Euler, Vector3} from \"three\"\n\nimport \"./App.css\"\nimport {daVinci, daVinciOutput, DaVinciResult, daVinciToDome, degreesToRadians, JointPosition} from \"./DaVinci\"\nimport {DaVinciSpec, SpecEditor} from \"./DaVinciSpec\"\nimport {saveCSVZip} from \"./Download\"\nimport {Ball, BarBox, BoltCylinder} from \"./Parts\"\nimport {Chirality, Scaffold} from \"./Scaffold\"\n\nconst INITIAL_RENDER_SPEC: DaVinciSpec = {\n    frequency: 2,\n    degrees: 30,\n    radius: 7,\n    boltWidth: 0.05,\n    barWidth: 0.3,\n    barHeight: 0.06,\n    barExtension: 0.3,\n    boltExtension: 0.2,\n    planeHeight: 0,\n}\nconst chiralityFromSpec = ({degrees}: DaVinciSpec) => degrees > 0 ? Chirality.Right : Chirality.Left\n\n\nfunction App(): JSX.Element {\n    const [size, setSize] = useState([window.innerWidth, window.innerHeight])\n    const [renderSpec, setRenderSpec] = useState(INITIAL_RENDER_SPEC)\n    const [daVinciResult, setDaVinciResult] = useState<DaVinciResult>(daVinciToDome(daVinci(\n        new Scaffold(renderSpec.frequency, renderSpec.radius, chiralityFromSpec(renderSpec)),\n        degreesToRadians(renderSpec.degrees), true,\n    ), renderSpec.planeHeight))\n    const [version, setVersion] = useState(0)\n    useEffect(() => {\n        const checkSize = () => setSize([window.innerWidth, window.innerHeight])\n        window.addEventListener(\"resize\", checkSize)\n        return () => window.removeEventListener(\"resize\", checkSize)\n    }, [])\n    useEffect(() => {\n        const {frequency, radius, degrees} = renderSpec\n        const radians = Math.abs(degreesToRadians(degrees))\n        const result = daVinci(new Scaffold(frequency, radius, chiralityFromSpec(renderSpec)), radians, true)\n        setDaVinciResult(daVinciToDome(result, renderSpec.planeHeight))\n        setVersion(v => v + 1)\n    }, [renderSpec])\n    const circleRadius = () => 1.5 * Math.sqrt(daVinciResult.joints.filter(j => j.position !== JointPosition.Below).reduce((r, {point}) => (\n        Math.max(r, point.x * point.x + point.z * point.z)\n    ), 0))\n    return (\n        <div className=\"App\" style={{width: size[0], height: size[1]}}>\n            <SpecEditor spec={renderSpec} setSpec={spec => setRenderSpec(spec)}\n                        saveCSV={() => saveCSVZip(daVinciOutput(daVinciResult))}\n            />\n            <Canvas className=\"canvas\">\n                <ambientLight intensity={0.05}/>\n                <mesh onDoubleClick={event => {\n                    const face = event.face\n                    if (!face) {\n                        return\n                    }\n                    const position = new Vector3(0, renderSpec.planeHeight, 0)\n                    const distance = position.distanceTo(event.camera.position)\n                    position.add(face.normal.multiplyScalar(distance))\n                    event.camera.position.copy(position)\n                }} position={new Vector3(0, renderSpec.planeHeight, 0)}>\n                    <boxGeometry args={[1, 1, 1]}/>\n                    <meshStandardMaterial transparent={true} opacity={0.8} color=\"orange\"/>\n                </mesh>\n                <mesh rotation={new Euler(Math.PI / 2, 0, 0)} position={new Vector3(0, renderSpec.planeHeight, 0)}>\n                    <circleGeometry args={[circleRadius(), 120]}/>\n                    <meshStandardMaterial transparent={true} opacity={0.9} color=\"darkgreen\" side={2}/>\n                </mesh>\n                {daVinciResult.bars\n                    .filter(bar => !(bar.joints[0].position === JointPosition.Below || bar.joints[bar.joints.length - 1].position === JointPosition.Below))\n                    .map((bar, index) => (\n                        <BarBox key={`bar-${version}-#${index}`} bar={bar} renderSpec={renderSpec}/>\n                    ))}\n                {daVinciResult.bolts\n                    .filter(bolt => bolt.jointA.position === JointPosition.Above || bolt.jointB.position === JointPosition.Above)\n                    .map((bolt, index) => (\n                        <BoltCylinder key={`bolt-${version}-#${index}`} bolt={bolt} renderSpec={renderSpec}/>\n                    ))}\n                {daVinciResult.joints.filter(joint => joint.position === JointPosition.OnSurface).map((joint, index) => (\n                    <Ball key={`ball-${version}-#${index}`} position={joint.point} radius={renderSpec.barWidth}/>\n                ))}\n                <pointLight position={[0, 10 * renderSpec.radius, 0]} color=\"white\"/>\n                <PerspectiveCamera makeDefault={true}\n                                   position={new Vector3(2 * circleRadius(), renderSpec.planeHeight, 0)}/>\n                <OrbitControls target={new Vector3(0, (renderSpec.planeHeight + renderSpec.radius) / 2, 0)}/>\n            </Canvas>\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}